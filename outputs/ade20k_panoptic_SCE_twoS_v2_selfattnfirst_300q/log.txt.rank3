[08/07 15:15:19] detectron2 INFO: Rank of current process: 3. World size: 4
[08/07 15:15:21] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
numpy                            1.24.4
detectron2                       0.6 @/public/home/zhuyuchen530/projects/cvpr24/2sM2F/detectron2/detectron2
Compiler                         GCC 7.5
CUDA compiler                    CUDA 11.8
detectron2 arch flags            8.6
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          1.9.0 @/public/home/zhuyuchen530/.conda/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2,3                      NVIDIA A100 80GB PCIe (arch=8.0)
Driver version                   550.54.15
CUDA_HOME                        /public/home/zhuyuchen530/cuda-11.8
Pillow                           9.3.0
torchvision                      0.10.0 @/public/home/zhuyuchen530/.conda/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags           3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/07 15:15:21] detectron2 INFO: Command line arguments: Namespace(config_file='configs/ade20k/panoptic-segmentation/maskformer2_R50_bs16_160k.yaml', dist_url='tcp://127.0.0.1:51022', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=True)
[08/07 15:15:21] detectron2 INFO: Contents of args.config_file=configs/ade20k/panoptic-segmentation/maskformer2_R50_bs16_160k.yaml:
[38;5;204m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBase-ADE20K-PanopticSegmentation.yaml[39m
[38;5;204mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;204mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormer[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;204mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormerHead[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m255[39m
[38;5;15m    [39m[38;5;204mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m150[39m
[38;5;15m    [39m[38;5;204mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;204mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mMASK_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mGN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;245m# pixel decoder[39m
[38;5;15m    [39m[38;5;204mPIXEL_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMSDeformAttnPixelDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;204mDEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;204mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_ENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m  [39m[38;5;204mMASK_FORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMultiScaleMaskedTransformerDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_IN_FEATURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmulti_scale_pixel_decoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mDEEP_SUPERVISION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;204mNO_OBJECT_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;204mCLASS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;204mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;204mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;204mHIDDEN_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mNUM_OBJECT_QUERIES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m300[39m
[38;5;15m    [39m[38;5;204mNHEADS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;204mDROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;204mDIM_FEEDFORWARD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;204mENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;204mPRE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;204mENFORCE_INPUT_PROJ[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;204mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;204mDEC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m[38;5;15m  [39m[38;5;245m# 9 decoder layers, add one for the loss on learnable query[39m
[38;5;15m    [39m[38;5;204mTRAIN_NUM_POINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12544[39m
[38;5;15m    [39m[38;5;204mOVERSAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m    [39m[38;5;204mIMPORTANCE_SAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.75[39m
[38;5;15m    [39m[38;5;204mTEST[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;204mSEMANTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;204mINSTANCE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;204mPANOPTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m      [39m[38;5;204mOVERLAP_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m
[38;5;15m      [39m[38;5;204mOBJECT_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;204mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141moutputs/ade20k_panoptic_SCE_twoS_v2_selfattnfirst_300q[39m[38;5;15m [39m
[38;5;204mSEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m24975392[39m

[08/07 15:15:22] detectron2.engine.defaults INFO: Model:
MaskFormer(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(300, 256)
      (query_embed): Embedding(300, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=150, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (ref_point_head): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=512, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (enc_output): Linear(in_features=256, out_features=256, bias=True)
      (encoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_scale): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (_bbox_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=4, bias=True)
        )
      )
      (bbox_embed): ModuleList(
        (0): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (1): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (2): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (3): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (4): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (5): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (6): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (7): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (8): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks', 'points']
      weight_dict: {'interm_loss_ce': 2.0, 'loss_ce': 2.0, 'interm_loss_mask': 5.0, 'loss_mask': 5.0, 'interm_loss_dice': 5.0, 'loss_dice': 5.0, 'interm_loss_bbox': 5.0, 'loss_giou': 2.0, 'interm_loss_giou': 2.0, 'loss_bbox': 5.0, 'interm_loss_ce_0': 2.0, 'loss_ce_0': 2.0, 'interm_loss_mask_0': 5.0, 'loss_mask_0': 5.0, 'interm_loss_dice_0': 5.0, 'loss_dice_0': 5.0, 'interm_loss_bbox_0': 5.0, 'loss_giou_0': 2.0, 'interm_loss_giou_0': 2.0, 'loss_bbox_0': 5.0, 'interm_loss_ce_1': 2.0, 'loss_ce_1': 2.0, 'interm_loss_mask_1': 5.0, 'loss_mask_1': 5.0, 'interm_loss_dice_1': 5.0, 'loss_dice_1': 5.0, 'interm_loss_bbox_1': 5.0, 'loss_giou_1': 2.0, 'interm_loss_giou_1': 2.0, 'loss_bbox_1': 5.0, 'interm_loss_ce_2': 2.0, 'loss_ce_2': 2.0, 'interm_loss_mask_2': 5.0, 'loss_mask_2': 5.0, 'interm_loss_dice_2': 5.0, 'loss_dice_2': 5.0, 'interm_loss_bbox_2': 5.0, 'loss_giou_2': 2.0, 'interm_loss_giou_2': 2.0, 'loss_bbox_2': 5.0, 'interm_loss_ce_3': 2.0, 'loss_ce_3': 2.0, 'interm_loss_mask_3': 5.0, 'loss_mask_3': 5.0, 'interm_loss_dice_3': 5.0, 'loss_dice_3': 5.0, 'interm_loss_bbox_3': 5.0, 'loss_giou_3': 2.0, 'interm_loss_giou_3': 2.0, 'loss_bbox_3': 5.0, 'interm_loss_ce_4': 2.0, 'loss_ce_4': 2.0, 'interm_loss_mask_4': 5.0, 'loss_mask_4': 5.0, 'interm_loss_dice_4': 5.0, 'loss_dice_4': 5.0, 'interm_loss_bbox_4': 5.0, 'loss_giou_4': 2.0, 'interm_loss_giou_4': 2.0, 'loss_bbox_4': 5.0, 'interm_loss_ce_5': 2.0, 'loss_ce_5': 2.0, 'interm_loss_mask_5': 5.0, 'loss_mask_5': 5.0, 'interm_loss_dice_5': 5.0, 'loss_dice_5': 5.0, 'interm_loss_bbox_5': 5.0, 'loss_giou_5': 2.0, 'interm_loss_giou_5': 2.0, 'loss_bbox_5': 5.0, 'interm_loss_ce_6': 2.0, 'loss_ce_6': 2.0, 'interm_loss_mask_6': 5.0, 'loss_mask_6': 5.0, 'interm_loss_dice_6': 5.0, 'loss_dice_6': 5.0, 'interm_loss_bbox_6': 5.0, 'loss_giou_6': 2.0, 'interm_loss_giou_6': 2.0, 'loss_bbox_6': 5.0, 'interm_loss_ce_7': 2.0, 'loss_ce_7': 2.0, 'interm_loss_mask_7': 5.0, 'loss_mask_7': 5.0, 'interm_loss_dice_7': 5.0, 'loss_dice_7': 5.0, 'interm_loss_bbox_7': 5.0, 'loss_giou_7': 2.0, 'interm_loss_giou_7': 2.0, 'loss_bbox_7': 5.0, 'interm_loss_ce_8': 2.0, 'loss_ce_8': 2.0, 'interm_loss_mask_8': 5.0, 'loss_mask_8': 5.0, 'interm_loss_dice_8': 5.0, 'loss_dice_8': 5.0, 'interm_loss_bbox_8': 5.0, 'loss_giou_8': 2.0, 'interm_loss_giou_8': 2.0, 'loss_bbox_8': 5.0}
      num_classes: 150
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
)
[08/07 15:15:22] mask2former.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=2560, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[640, 640], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7efc41a148e0>, RandomFlip()]
[08/07 15:15:23] detectron2.data.build INFO: Using training sampler TrainingSampler
[08/07 15:15:24] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/07 15:15:24] detectron2.data.common INFO: Serializing 20210 elements to byte tensors and concatenating them all ...
[08/07 15:15:24] detectron2.data.common INFO: Serialized dataset takes 18.42 MiB
[08/07 15:15:24] detectron2.data.build INFO: Making batched data loader with batch_size=4
[08/07 15:15:24] detectron2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from weight/R-50.pkl ...
[08/07 15:15:24] fvcore.common.checkpoint INFO: [Checkpointer] Loading from weight/R-50.pkl ...
[08/07 15:15:24] fvcore.common.checkpoint INFO: Reading a file from 'torchvision'
[08/07 15:15:24] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone - Total num: 53
[08/07 15:15:24] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor._bbox_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor._bbox_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor._bbox_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.0.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.0.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.0.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.1.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.1.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.1.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.2.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.2.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.2.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.3.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.3.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.3.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.4.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.4.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.4.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.5.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.5.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.5.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.6.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.6.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.6.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.7.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.7.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.7.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.8.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.8.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.8.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.enc_output.{bias, weight}[0m
[34msem_seg_head.predictor.encoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.query_scale.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.query_scale.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.ref_point_head.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.ref_point_head.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[08/07 15:15:24] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[08/07 15:15:24] detectron2.engine.train_loop INFO: Starting training from iteration 0
[08/07 16:02:18] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/07 16:02:18] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/07 16:02:18] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/07 16:02:18] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/07 16:02:18] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/07 16:02:25] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0022 s/iter. Inference: 0.0744 s/iter. Eval: 0.0169 s/iter. Total: 0.0936 s/iter. ETA=0:00:45
[08/07 16:02:30] detectron2.evaluation.evaluator INFO: Inference done 71/500. Dataloading: 0.0025 s/iter. Inference: 0.0700 s/iter. Eval: 0.0129 s/iter. Total: 0.0855 s/iter. ETA=0:00:36
[08/07 16:02:35] detectron2.evaluation.evaluator INFO: Inference done 131/500. Dataloading: 0.0025 s/iter. Inference: 0.0696 s/iter. Eval: 0.0125 s/iter. Total: 0.0847 s/iter. ETA=0:00:31
[08/07 16:02:40] detectron2.evaluation.evaluator INFO: Inference done 193/500. Dataloading: 0.0025 s/iter. Inference: 0.0694 s/iter. Eval: 0.0117 s/iter. Total: 0.0837 s/iter. ETA=0:00:25
[08/07 16:02:45] detectron2.evaluation.evaluator INFO: Inference done 252/500. Dataloading: 0.0025 s/iter. Inference: 0.0697 s/iter. Eval: 0.0118 s/iter. Total: 0.0841 s/iter. ETA=0:00:20
[08/07 16:02:50] detectron2.evaluation.evaluator INFO: Inference done 311/500. Dataloading: 0.0025 s/iter. Inference: 0.0697 s/iter. Eval: 0.0122 s/iter. Total: 0.0844 s/iter. ETA=0:00:15
[08/07 16:02:55] detectron2.evaluation.evaluator INFO: Inference done 367/500. Dataloading: 0.0025 s/iter. Inference: 0.0700 s/iter. Eval: 0.0127 s/iter. Total: 0.0853 s/iter. ETA=0:00:11
[08/07 16:03:00] detectron2.evaluation.evaluator INFO: Inference done 430/500. Dataloading: 0.0025 s/iter. Inference: 0.0697 s/iter. Eval: 0.0123 s/iter. Total: 0.0845 s/iter. ETA=0:00:05
[08/07 16:03:06] detectron2.evaluation.evaluator INFO: Inference done 490/500. Dataloading: 0.0025 s/iter. Inference: 0.0697 s/iter. Eval: 0.0122 s/iter. Total: 0.0845 s/iter. ETA=0:00:00
[08/07 16:03:07] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:42.249126 (0.085352 s / iter per device, on 4 devices)
[08/07 16:03:07] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:34 (0.069640 s / iter per device, on 4 devices)
[08/07 16:37:45] detectron2.engine.hooks INFO: Overall training speed: 8711 iterations in 1:20:54 (0.5573 s / it)
[08/07 16:37:45] detectron2.engine.hooks INFO: Total training time: 1:22:11 (0:01:16 on hooks)
[08/07 16:39:49] detectron2 INFO: Rank of current process: 3. World size: 4
[08/07 16:39:52] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
numpy                            1.24.4
detectron2                       0.6 @/public/home/zhuyuchen530/projects/cvpr24/2sM2F/detectron2/detectron2
Compiler                         GCC 7.5
CUDA compiler                    CUDA 11.8
detectron2 arch flags            8.6
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          1.9.0 @/public/home/zhuyuchen530/.conda/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2,3                      NVIDIA A40 (arch=8.6)
Driver version                   550.54.15
CUDA_HOME                        /public/home/zhuyuchen530/cuda-11.8
Pillow                           9.3.0
torchvision                      0.10.0 @/public/home/zhuyuchen530/.conda/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags           3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/07 16:39:52] detectron2 INFO: Command line arguments: Namespace(config_file='configs/ade20k/panoptic-segmentation/maskformer2_R50_bs16_160k.yaml', dist_url='tcp://127.0.0.1:51022', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=True)
[08/07 16:39:52] detectron2 INFO: Contents of args.config_file=configs/ade20k/panoptic-segmentation/maskformer2_R50_bs16_160k.yaml:
[38;5;204m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBase-ADE20K-PanopticSegmentation.yaml[39m
[38;5;204mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;204mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormer[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;204mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormerHead[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m255[39m
[38;5;15m    [39m[38;5;204mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m150[39m
[38;5;15m    [39m[38;5;204mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;204mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mMASK_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mGN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;245m# pixel decoder[39m
[38;5;15m    [39m[38;5;204mPIXEL_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMSDeformAttnPixelDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;204mDEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;204mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_ENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m  [39m[38;5;204mMASK_FORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMultiScaleMaskedTransformerDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_IN_FEATURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmulti_scale_pixel_decoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mDEEP_SUPERVISION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;204mNO_OBJECT_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;204mCLASS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;204mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;204mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;204mHIDDEN_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mNUM_OBJECT_QUERIES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m300[39m
[38;5;15m    [39m[38;5;204mNHEADS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;204mDROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;204mDIM_FEEDFORWARD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;204mENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;204mPRE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;204mENFORCE_INPUT_PROJ[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;204mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;204mDEC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m[38;5;15m  [39m[38;5;245m# 9 decoder layers, add one for the loss on learnable query[39m
[38;5;15m    [39m[38;5;204mTRAIN_NUM_POINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12544[39m
[38;5;15m    [39m[38;5;204mOVERSAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m    [39m[38;5;204mIMPORTANCE_SAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.75[39m
[38;5;15m    [39m[38;5;204mTEST[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;204mSEMANTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;204mINSTANCE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;204mPANOPTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m      [39m[38;5;204mOVERLAP_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m
[38;5;15m      [39m[38;5;204mOBJECT_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;204mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141moutputs/ade20k_panoptic_SCE_twoS_v2_selfattnfirst_300q[39m[38;5;15m [39m
[38;5;204mSEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m24975392[39m

[08/07 16:39:54] detectron2.engine.defaults INFO: Model:
MaskFormer(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(300, 256)
      (query_embed): Embedding(300, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=150, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (ref_point_head): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=512, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (enc_output): Linear(in_features=256, out_features=256, bias=True)
      (encoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_scale): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (_bbox_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=4, bias=True)
        )
      )
      (bbox_embed): ModuleList(
        (0): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (1): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (2): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (3): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (4): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (5): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (6): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (7): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (8): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks', 'points']
      weight_dict: {'interm_loss_ce': 2.0, 'loss_ce': 2.0, 'interm_loss_mask': 5.0, 'loss_mask': 5.0, 'interm_loss_dice': 5.0, 'loss_dice': 5.0, 'interm_loss_bbox': 5.0, 'loss_giou': 2.0, 'interm_loss_giou': 2.0, 'loss_bbox': 5.0, 'interm_loss_ce_0': 2.0, 'loss_ce_0': 2.0, 'interm_loss_mask_0': 5.0, 'loss_mask_0': 5.0, 'interm_loss_dice_0': 5.0, 'loss_dice_0': 5.0, 'interm_loss_bbox_0': 5.0, 'loss_giou_0': 2.0, 'interm_loss_giou_0': 2.0, 'loss_bbox_0': 5.0, 'interm_loss_ce_1': 2.0, 'loss_ce_1': 2.0, 'interm_loss_mask_1': 5.0, 'loss_mask_1': 5.0, 'interm_loss_dice_1': 5.0, 'loss_dice_1': 5.0, 'interm_loss_bbox_1': 5.0, 'loss_giou_1': 2.0, 'interm_loss_giou_1': 2.0, 'loss_bbox_1': 5.0, 'interm_loss_ce_2': 2.0, 'loss_ce_2': 2.0, 'interm_loss_mask_2': 5.0, 'loss_mask_2': 5.0, 'interm_loss_dice_2': 5.0, 'loss_dice_2': 5.0, 'interm_loss_bbox_2': 5.0, 'loss_giou_2': 2.0, 'interm_loss_giou_2': 2.0, 'loss_bbox_2': 5.0, 'interm_loss_ce_3': 2.0, 'loss_ce_3': 2.0, 'interm_loss_mask_3': 5.0, 'loss_mask_3': 5.0, 'interm_loss_dice_3': 5.0, 'loss_dice_3': 5.0, 'interm_loss_bbox_3': 5.0, 'loss_giou_3': 2.0, 'interm_loss_giou_3': 2.0, 'loss_bbox_3': 5.0, 'interm_loss_ce_4': 2.0, 'loss_ce_4': 2.0, 'interm_loss_mask_4': 5.0, 'loss_mask_4': 5.0, 'interm_loss_dice_4': 5.0, 'loss_dice_4': 5.0, 'interm_loss_bbox_4': 5.0, 'loss_giou_4': 2.0, 'interm_loss_giou_4': 2.0, 'loss_bbox_4': 5.0, 'interm_loss_ce_5': 2.0, 'loss_ce_5': 2.0, 'interm_loss_mask_5': 5.0, 'loss_mask_5': 5.0, 'interm_loss_dice_5': 5.0, 'loss_dice_5': 5.0, 'interm_loss_bbox_5': 5.0, 'loss_giou_5': 2.0, 'interm_loss_giou_5': 2.0, 'loss_bbox_5': 5.0, 'interm_loss_ce_6': 2.0, 'loss_ce_6': 2.0, 'interm_loss_mask_6': 5.0, 'loss_mask_6': 5.0, 'interm_loss_dice_6': 5.0, 'loss_dice_6': 5.0, 'interm_loss_bbox_6': 5.0, 'loss_giou_6': 2.0, 'interm_loss_giou_6': 2.0, 'loss_bbox_6': 5.0, 'interm_loss_ce_7': 2.0, 'loss_ce_7': 2.0, 'interm_loss_mask_7': 5.0, 'loss_mask_7': 5.0, 'interm_loss_dice_7': 5.0, 'loss_dice_7': 5.0, 'interm_loss_bbox_7': 5.0, 'loss_giou_7': 2.0, 'interm_loss_giou_7': 2.0, 'loss_bbox_7': 5.0, 'interm_loss_ce_8': 2.0, 'loss_ce_8': 2.0, 'interm_loss_mask_8': 5.0, 'loss_mask_8': 5.0, 'interm_loss_dice_8': 5.0, 'loss_dice_8': 5.0, 'interm_loss_bbox_8': 5.0, 'loss_giou_8': 2.0, 'interm_loss_giou_8': 2.0, 'loss_bbox_8': 5.0}
      num_classes: 150
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
)
[08/07 16:39:54] mask2former.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=2560, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[640, 640], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7fdf8ab84a30>, RandomFlip()]
[08/07 16:39:55] detectron2.data.build INFO: Using training sampler TrainingSampler
[08/07 16:39:55] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/07 16:39:55] detectron2.data.common INFO: Serializing 20210 elements to byte tensors and concatenating them all ...
[08/07 16:39:56] detectron2.data.common INFO: Serialized dataset takes 18.42 MiB
[08/07 16:39:56] detectron2.data.build INFO: Making batched data loader with batch_size=4
[08/07 16:39:56] detectron2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from weight/R-50.pkl ...
[08/07 16:39:56] fvcore.common.checkpoint INFO: [Checkpointer] Loading from weight/R-50.pkl ...
[08/07 16:39:56] fvcore.common.checkpoint INFO: Reading a file from 'torchvision'
[08/07 16:39:56] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone - Total num: 53
[08/07 16:39:56] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor._bbox_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor._bbox_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor._bbox_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.0.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.0.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.0.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.1.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.1.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.1.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.2.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.2.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.2.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.3.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.3.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.3.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.4.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.4.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.4.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.5.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.5.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.5.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.6.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.6.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.6.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.7.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.7.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.7.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.8.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.8.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.8.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.enc_output.{bias, weight}[0m
[34msem_seg_head.predictor.encoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.query_scale.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.query_scale.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.ref_point_head.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.ref_point_head.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[08/07 16:39:56] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[08/07 16:39:56] detectron2.engine.train_loop INFO: Starting training from iteration 0
[08/07 18:56:53] detectron2 INFO: Rank of current process: 3. World size: 4
[08/07 18:56:58] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
numpy                            1.24.4
detectron2                       0.6 @/public/home/zhuyuchen530/projects/cvpr24/2sM2F/detectron2/detectron2
Compiler                         GCC 7.5
CUDA compiler                    CUDA 11.8
detectron2 arch flags            8.6
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          1.9.0 @/public/home/zhuyuchen530/.conda/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2,3                      NVIDIA A40 (arch=8.6)
Driver version                   550.54.15
CUDA_HOME                        /public/home/zhuyuchen530/cuda-11.8
Pillow                           9.3.0
torchvision                      0.10.0 @/public/home/zhuyuchen530/.conda/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags           3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/07 18:56:58] detectron2 INFO: Command line arguments: Namespace(config_file='configs/ade20k/panoptic-segmentation/maskformer2_R50_bs16_160k.yaml', dist_url='tcp://127.0.0.1:51022', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=True)
[08/07 18:56:58] detectron2 INFO: Contents of args.config_file=configs/ade20k/panoptic-segmentation/maskformer2_R50_bs16_160k.yaml:
[38;5;204m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBase-ADE20K-PanopticSegmentation.yaml[39m
[38;5;204mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;204mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormer[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;204mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormerHead[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m255[39m
[38;5;15m    [39m[38;5;204mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m150[39m
[38;5;15m    [39m[38;5;204mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;204mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mMASK_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mGN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;245m# pixel decoder[39m
[38;5;15m    [39m[38;5;204mPIXEL_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMSDeformAttnPixelDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;204mDEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;204mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_ENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m  [39m[38;5;204mMASK_FORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMultiScaleMaskedTransformerDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_IN_FEATURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmulti_scale_pixel_decoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mDEEP_SUPERVISION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;204mNO_OBJECT_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;204mCLASS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;204mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;204mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;204mHIDDEN_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mNUM_OBJECT_QUERIES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m300[39m
[38;5;15m    [39m[38;5;204mNHEADS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;204mDROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;204mDIM_FEEDFORWARD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;204mENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;204mPRE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;204mENFORCE_INPUT_PROJ[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;204mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;204mDEC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m[38;5;15m  [39m[38;5;245m# 9 decoder layers, add one for the loss on learnable query[39m
[38;5;15m    [39m[38;5;204mTRAIN_NUM_POINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12544[39m
[38;5;15m    [39m[38;5;204mOVERSAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m    [39m[38;5;204mIMPORTANCE_SAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.75[39m
[38;5;15m    [39m[38;5;204mTEST[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;204mSEMANTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;204mINSTANCE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;204mPANOPTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m      [39m[38;5;204mOVERLAP_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m
[38;5;15m      [39m[38;5;204mOBJECT_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;204mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141moutputs/ade20k_panoptic_SCE_twoS_v2_selfattnfirst_300q[39m[38;5;15m [39m
[38;5;204mSEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m24975392[39m

[08/07 18:57:00] detectron2.engine.defaults INFO: Model:
MaskFormer(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(300, 256)
      (query_embed): Embedding(300, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=150, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (ref_point_head): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=512, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (enc_output): Linear(in_features=256, out_features=256, bias=True)
      (encoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_scale): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (_bbox_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=4, bias=True)
        )
      )
      (bbox_embed): ModuleList(
        (0): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (1): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (2): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (3): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (4): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (5): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (6): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (7): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
        (8): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks', 'points']
      weight_dict: {'interm_loss_ce': 2.0, 'loss_ce': 2.0, 'interm_loss_mask': 5.0, 'loss_mask': 5.0, 'interm_loss_dice': 5.0, 'loss_dice': 5.0, 'interm_loss_bbox': 5.0, 'loss_giou': 2.0, 'interm_loss_giou': 2.0, 'loss_bbox': 5.0, 'interm_loss_ce_0': 2.0, 'loss_ce_0': 2.0, 'interm_loss_mask_0': 5.0, 'loss_mask_0': 5.0, 'interm_loss_dice_0': 5.0, 'loss_dice_0': 5.0, 'interm_loss_bbox_0': 5.0, 'loss_giou_0': 2.0, 'interm_loss_giou_0': 2.0, 'loss_bbox_0': 5.0, 'interm_loss_ce_1': 2.0, 'loss_ce_1': 2.0, 'interm_loss_mask_1': 5.0, 'loss_mask_1': 5.0, 'interm_loss_dice_1': 5.0, 'loss_dice_1': 5.0, 'interm_loss_bbox_1': 5.0, 'loss_giou_1': 2.0, 'interm_loss_giou_1': 2.0, 'loss_bbox_1': 5.0, 'interm_loss_ce_2': 2.0, 'loss_ce_2': 2.0, 'interm_loss_mask_2': 5.0, 'loss_mask_2': 5.0, 'interm_loss_dice_2': 5.0, 'loss_dice_2': 5.0, 'interm_loss_bbox_2': 5.0, 'loss_giou_2': 2.0, 'interm_loss_giou_2': 2.0, 'loss_bbox_2': 5.0, 'interm_loss_ce_3': 2.0, 'loss_ce_3': 2.0, 'interm_loss_mask_3': 5.0, 'loss_mask_3': 5.0, 'interm_loss_dice_3': 5.0, 'loss_dice_3': 5.0, 'interm_loss_bbox_3': 5.0, 'loss_giou_3': 2.0, 'interm_loss_giou_3': 2.0, 'loss_bbox_3': 5.0, 'interm_loss_ce_4': 2.0, 'loss_ce_4': 2.0, 'interm_loss_mask_4': 5.0, 'loss_mask_4': 5.0, 'interm_loss_dice_4': 5.0, 'loss_dice_4': 5.0, 'interm_loss_bbox_4': 5.0, 'loss_giou_4': 2.0, 'interm_loss_giou_4': 2.0, 'loss_bbox_4': 5.0, 'interm_loss_ce_5': 2.0, 'loss_ce_5': 2.0, 'interm_loss_mask_5': 5.0, 'loss_mask_5': 5.0, 'interm_loss_dice_5': 5.0, 'loss_dice_5': 5.0, 'interm_loss_bbox_5': 5.0, 'loss_giou_5': 2.0, 'interm_loss_giou_5': 2.0, 'loss_bbox_5': 5.0, 'interm_loss_ce_6': 2.0, 'loss_ce_6': 2.0, 'interm_loss_mask_6': 5.0, 'loss_mask_6': 5.0, 'interm_loss_dice_6': 5.0, 'loss_dice_6': 5.0, 'interm_loss_bbox_6': 5.0, 'loss_giou_6': 2.0, 'interm_loss_giou_6': 2.0, 'loss_bbox_6': 5.0, 'interm_loss_ce_7': 2.0, 'loss_ce_7': 2.0, 'interm_loss_mask_7': 5.0, 'loss_mask_7': 5.0, 'interm_loss_dice_7': 5.0, 'loss_dice_7': 5.0, 'interm_loss_bbox_7': 5.0, 'loss_giou_7': 2.0, 'interm_loss_giou_7': 2.0, 'loss_bbox_7': 5.0, 'interm_loss_ce_8': 2.0, 'loss_ce_8': 2.0, 'interm_loss_mask_8': 5.0, 'loss_mask_8': 5.0, 'interm_loss_dice_8': 5.0, 'loss_dice_8': 5.0, 'interm_loss_bbox_8': 5.0, 'loss_giou_8': 2.0, 'interm_loss_giou_8': 2.0, 'loss_bbox_8': 5.0}
      num_classes: 150
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
)
[08/07 18:57:00] mask2former.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=2560, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[640, 640], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7fd5d7a858e0>, RandomFlip()]
[08/07 18:57:02] detectron2.data.build INFO: Using training sampler TrainingSampler
[08/07 18:57:02] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/07 18:57:02] detectron2.data.common INFO: Serializing 20210 elements to byte tensors and concatenating them all ...
[08/07 18:57:02] detectron2.data.common INFO: Serialized dataset takes 18.42 MiB
[08/07 18:57:02] detectron2.data.build INFO: Making batched data loader with batch_size=4
[08/07 18:57:03] detectron2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from weight/R-50.pkl ...
[08/07 18:57:03] fvcore.common.checkpoint INFO: [Checkpointer] Loading from weight/R-50.pkl ...
[08/07 18:57:03] fvcore.common.checkpoint INFO: Reading a file from 'torchvision'
[08/07 18:57:03] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone - Total num: 53
[08/07 18:57:03] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor._bbox_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor._bbox_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor._bbox_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.0.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.0.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.0.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.1.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.1.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.1.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.2.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.2.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.2.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.3.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.3.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.3.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.4.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.4.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.4.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.5.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.5.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.5.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.6.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.6.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.6.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.7.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.7.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.7.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.8.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.8.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.bbox_embed.8.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.enc_output.{bias, weight}[0m
[34msem_seg_head.predictor.encoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.query_scale.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.query_scale.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.ref_point_head.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.ref_point_head.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[08/07 18:57:03] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[08/07 18:57:03] detectron2.engine.train_loop INFO: Starting training from iteration 0
[08/07 21:01:24] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/07 21:01:24] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/07 21:01:24] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/07 21:01:24] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/07 21:01:24] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/07 21:01:32] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0018 s/iter. Inference: 0.1043 s/iter. Eval: 0.0212 s/iter. Total: 0.1272 s/iter. ETA=0:01:02
[08/07 21:01:38] detectron2.evaluation.evaluator INFO: Inference done 53/500. Dataloading: 0.0029 s/iter. Inference: 0.1026 s/iter. Eval: 0.0163 s/iter. Total: 0.1220 s/iter. ETA=0:00:54
[08/07 21:01:43] detectron2.evaluation.evaluator INFO: Inference done 97/500. Dataloading: 0.0026 s/iter. Inference: 0.0999 s/iter. Eval: 0.0161 s/iter. Total: 0.1188 s/iter. ETA=0:00:47
[08/07 21:01:48] detectron2.evaluation.evaluator INFO: Inference done 144/500. Dataloading: 0.0026 s/iter. Inference: 0.0978 s/iter. Eval: 0.0146 s/iter. Total: 0.1151 s/iter. ETA=0:00:40
[08/07 21:01:53] detectron2.evaluation.evaluator INFO: Inference done 190/500. Dataloading: 0.0025 s/iter. Inference: 0.0975 s/iter. Eval: 0.0134 s/iter. Total: 0.1135 s/iter. ETA=0:00:35
[08/07 21:01:58] detectron2.evaluation.evaluator INFO: Inference done 233/500. Dataloading: 0.0025 s/iter. Inference: 0.0975 s/iter. Eval: 0.0141 s/iter. Total: 0.1142 s/iter. ETA=0:00:30
[08/07 21:02:03] detectron2.evaluation.evaluator INFO: Inference done 280/500. Dataloading: 0.0025 s/iter. Inference: 0.0968 s/iter. Eval: 0.0137 s/iter. Total: 0.1130 s/iter. ETA=0:00:24
[08/07 21:02:08] detectron2.evaluation.evaluator INFO: Inference done 319/500. Dataloading: 0.0026 s/iter. Inference: 0.0976 s/iter. Eval: 0.0148 s/iter. Total: 0.1151 s/iter. ETA=0:00:20
[08/07 21:02:13] detectron2.evaluation.evaluator INFO: Inference done 360/500. Dataloading: 0.0025 s/iter. Inference: 0.0979 s/iter. Eval: 0.0154 s/iter. Total: 0.1159 s/iter. ETA=0:00:16
[08/07 21:02:18] detectron2.evaluation.evaluator INFO: Inference done 408/500. Dataloading: 0.0025 s/iter. Inference: 0.0972 s/iter. Eval: 0.0147 s/iter. Total: 0.1145 s/iter. ETA=0:00:10
[08/07 21:02:23] detectron2.evaluation.evaluator INFO: Inference done 454/500. Dataloading: 0.0025 s/iter. Inference: 0.0969 s/iter. Eval: 0.0146 s/iter. Total: 0.1141 s/iter. ETA=0:00:05
[08/07 21:02:28] detectron2.evaluation.evaluator INFO: Inference done 500/500. Dataloading: 0.0025 s/iter. Inference: 0.0967 s/iter. Eval: 0.0145 s/iter. Total: 0.1137 s/iter. ETA=0:00:00
[08/07 21:02:28] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:56.703874 (0.114553 s / iter per device, on 4 devices)
[08/07 21:02:28] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:47 (0.096705 s / iter per device, on 4 devices)
[08/07 22:10:00] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/07 22:10:00] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/07 22:10:00] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/07 22:10:00] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/07 22:10:00] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/07 22:10:10] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0018 s/iter. Inference: 0.1039 s/iter. Eval: 0.0190 s/iter. Total: 0.1247 s/iter. ETA=0:01:00
[08/07 22:10:15] detectron2.evaluation.evaluator INFO: Inference done 57/500. Dataloading: 0.0020 s/iter. Inference: 0.0937 s/iter. Eval: 0.0161 s/iter. Total: 0.1119 s/iter. ETA=0:00:49
[08/07 22:10:20] detectron2.evaluation.evaluator INFO: Inference done 107/500. Dataloading: 0.0020 s/iter. Inference: 0.0897 s/iter. Eval: 0.0151 s/iter. Total: 0.1068 s/iter. ETA=0:00:41
[08/07 22:10:25] detectron2.evaluation.evaluator INFO: Inference done 155/500. Dataloading: 0.0022 s/iter. Inference: 0.0900 s/iter. Eval: 0.0137 s/iter. Total: 0.1060 s/iter. ETA=0:00:36
[08/07 22:10:30] detectron2.evaluation.evaluator INFO: Inference done 204/500. Dataloading: 0.0022 s/iter. Inference: 0.0895 s/iter. Eval: 0.0133 s/iter. Total: 0.1051 s/iter. ETA=0:00:31
[08/07 22:10:35] detectron2.evaluation.evaluator INFO: Inference done 251/500. Dataloading: 0.0022 s/iter. Inference: 0.0900 s/iter. Eval: 0.0132 s/iter. Total: 0.1054 s/iter. ETA=0:00:26
[08/07 22:10:40] detectron2.evaluation.evaluator INFO: Inference done 301/500. Dataloading: 0.0022 s/iter. Inference: 0.0894 s/iter. Eval: 0.0133 s/iter. Total: 0.1049 s/iter. ETA=0:00:20
[08/07 22:10:45] detectron2.evaluation.evaluator INFO: Inference done 347/500. Dataloading: 0.0022 s/iter. Inference: 0.0894 s/iter. Eval: 0.0141 s/iter. Total: 0.1057 s/iter. ETA=0:00:16
[08/07 22:10:50] detectron2.evaluation.evaluator INFO: Inference done 397/500. Dataloading: 0.0021 s/iter. Inference: 0.0891 s/iter. Eval: 0.0137 s/iter. Total: 0.1050 s/iter. ETA=0:00:10
[08/07 22:10:55] detectron2.evaluation.evaluator INFO: Inference done 447/500. Dataloading: 0.0021 s/iter. Inference: 0.0890 s/iter. Eval: 0.0134 s/iter. Total: 0.1047 s/iter. ETA=0:00:05
[08/07 22:11:00] detectron2.evaluation.evaluator INFO: Inference done 498/500. Dataloading: 0.0022 s/iter. Inference: 0.0885 s/iter. Eval: 0.0133 s/iter. Total: 0.1041 s/iter. ETA=0:00:00
[08/07 22:11:01] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:51.828540 (0.104704 s / iter per device, on 4 devices)
[08/07 22:11:01] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:43 (0.088433 s / iter per device, on 4 devices)
[08/07 23:18:19] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/07 23:18:19] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/07 23:18:19] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/07 23:18:19] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/07 23:18:19] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/07 23:18:28] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0018 s/iter. Inference: 0.1034 s/iter. Eval: 0.0180 s/iter. Total: 0.1232 s/iter. ETA=0:01:00
[08/07 23:18:33] detectron2.evaluation.evaluator INFO: Inference done 57/500. Dataloading: 0.0023 s/iter. Inference: 0.0929 s/iter. Eval: 0.0161 s/iter. Total: 0.1113 s/iter. ETA=0:00:49
[08/07 23:18:38] detectron2.evaluation.evaluator INFO: Inference done 103/500. Dataloading: 0.0023 s/iter. Inference: 0.0930 s/iter. Eval: 0.0157 s/iter. Total: 0.1110 s/iter. ETA=0:00:44
[08/07 23:18:43] detectron2.evaluation.evaluator INFO: Inference done 154/500. Dataloading: 0.0022 s/iter. Inference: 0.0908 s/iter. Eval: 0.0140 s/iter. Total: 0.1071 s/iter. ETA=0:00:37
[08/07 23:18:48] detectron2.evaluation.evaluator INFO: Inference done 202/500. Dataloading: 0.0023 s/iter. Inference: 0.0903 s/iter. Eval: 0.0138 s/iter. Total: 0.1064 s/iter. ETA=0:00:31
[08/07 23:18:54] detectron2.evaluation.evaluator INFO: Inference done 249/500. Dataloading: 0.0022 s/iter. Inference: 0.0907 s/iter. Eval: 0.0137 s/iter. Total: 0.1067 s/iter. ETA=0:00:26
[08/07 23:18:59] detectron2.evaluation.evaluator INFO: Inference done 296/500. Dataloading: 0.0022 s/iter. Inference: 0.0910 s/iter. Eval: 0.0136 s/iter. Total: 0.1068 s/iter. ETA=0:00:21
[08/07 23:19:04] detectron2.evaluation.evaluator INFO: Inference done 341/500. Dataloading: 0.0022 s/iter. Inference: 0.0910 s/iter. Eval: 0.0143 s/iter. Total: 0.1076 s/iter. ETA=0:00:17
[08/07 23:19:09] detectron2.evaluation.evaluator INFO: Inference done 390/500. Dataloading: 0.0022 s/iter. Inference: 0.0907 s/iter. Eval: 0.0141 s/iter. Total: 0.1071 s/iter. ETA=0:00:11
[08/07 23:19:14] detectron2.evaluation.evaluator INFO: Inference done 440/500. Dataloading: 0.0022 s/iter. Inference: 0.0903 s/iter. Eval: 0.0138 s/iter. Total: 0.1063 s/iter. ETA=0:00:06
[08/07 23:19:19] detectron2.evaluation.evaluator INFO: Inference done 487/500. Dataloading: 0.0022 s/iter. Inference: 0.0905 s/iter. Eval: 0.0138 s/iter. Total: 0.1065 s/iter. ETA=0:00:01
[08/07 23:19:20] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:52.907121 (0.106883 s / iter per device, on 4 devices)
[08/07 23:19:20] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:44 (0.090328 s / iter per device, on 4 devices)
[08/08 00:26:55] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 00:26:55] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 00:26:55] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 00:26:55] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 00:26:55] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 00:27:04] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0022 s/iter. Inference: 0.1129 s/iter. Eval: 0.0226 s/iter. Total: 0.1376 s/iter. ETA=0:01:07
[08/08 00:27:09] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0022 s/iter. Inference: 0.0956 s/iter. Eval: 0.0169 s/iter. Total: 0.1148 s/iter. ETA=0:00:50
[08/08 00:27:14] detectron2.evaluation.evaluator INFO: Inference done 104/500. Dataloading: 0.0022 s/iter. Inference: 0.0918 s/iter. Eval: 0.0157 s/iter. Total: 0.1098 s/iter. ETA=0:00:43
[08/08 00:27:19] detectron2.evaluation.evaluator INFO: Inference done 152/500. Dataloading: 0.0023 s/iter. Inference: 0.0911 s/iter. Eval: 0.0146 s/iter. Total: 0.1081 s/iter. ETA=0:00:37
[08/08 00:27:24] detectron2.evaluation.evaluator INFO: Inference done 199/500. Dataloading: 0.0023 s/iter. Inference: 0.0915 s/iter. Eval: 0.0139 s/iter. Total: 0.1078 s/iter. ETA=0:00:32
[08/08 00:27:29] detectron2.evaluation.evaluator INFO: Inference done 245/500. Dataloading: 0.0023 s/iter. Inference: 0.0922 s/iter. Eval: 0.0139 s/iter. Total: 0.1084 s/iter. ETA=0:00:27
[08/08 00:27:34] detectron2.evaluation.evaluator INFO: Inference done 295/500. Dataloading: 0.0022 s/iter. Inference: 0.0912 s/iter. Eval: 0.0136 s/iter. Total: 0.1071 s/iter. ETA=0:00:21
[08/08 00:27:39] detectron2.evaluation.evaluator INFO: Inference done 339/500. Dataloading: 0.0022 s/iter. Inference: 0.0912 s/iter. Eval: 0.0145 s/iter. Total: 0.1080 s/iter. ETA=0:00:17
[08/08 00:27:45] detectron2.evaluation.evaluator INFO: Inference done 387/500. Dataloading: 0.0022 s/iter. Inference: 0.0912 s/iter. Eval: 0.0144 s/iter. Total: 0.1078 s/iter. ETA=0:00:12
[08/08 00:27:50] detectron2.evaluation.evaluator INFO: Inference done 434/500. Dataloading: 0.0022 s/iter. Inference: 0.0914 s/iter. Eval: 0.0141 s/iter. Total: 0.1077 s/iter. ETA=0:00:07
[08/08 00:27:55] detectron2.evaluation.evaluator INFO: Inference done 481/500. Dataloading: 0.0022 s/iter. Inference: 0.0915 s/iter. Eval: 0.0140 s/iter. Total: 0.1078 s/iter. ETA=0:00:02
[08/08 00:27:57] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.528942 (0.108139 s / iter per device, on 4 devices)
[08/08 00:27:57] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.091331 s / iter per device, on 4 devices)
[08/08 01:35:24] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 01:35:24] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 01:35:24] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 01:35:24] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 01:35:24] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 01:35:33] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0016 s/iter. Inference: 0.1036 s/iter. Eval: 0.0193 s/iter. Total: 0.1245 s/iter. ETA=0:01:00
[08/08 01:35:38] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0022 s/iter. Inference: 0.0961 s/iter. Eval: 0.0157 s/iter. Total: 0.1141 s/iter. ETA=0:00:50
[08/08 01:35:43] detectron2.evaluation.evaluator INFO: Inference done 102/500. Dataloading: 0.0024 s/iter. Inference: 0.0942 s/iter. Eval: 0.0151 s/iter. Total: 0.1118 s/iter. ETA=0:00:44
[08/08 01:35:48] detectron2.evaluation.evaluator INFO: Inference done 151/500. Dataloading: 0.0023 s/iter. Inference: 0.0934 s/iter. Eval: 0.0136 s/iter. Total: 0.1093 s/iter. ETA=0:00:38
[08/08 01:35:53] detectron2.evaluation.evaluator INFO: Inference done 199/500. Dataloading: 0.0022 s/iter. Inference: 0.0929 s/iter. Eval: 0.0133 s/iter. Total: 0.1085 s/iter. ETA=0:00:32
[08/08 01:35:58] detectron2.evaluation.evaluator INFO: Inference done 246/500. Dataloading: 0.0022 s/iter. Inference: 0.0928 s/iter. Eval: 0.0133 s/iter. Total: 0.1083 s/iter. ETA=0:00:27
[08/08 01:36:03] detectron2.evaluation.evaluator INFO: Inference done 295/500. Dataloading: 0.0022 s/iter. Inference: 0.0920 s/iter. Eval: 0.0133 s/iter. Total: 0.1075 s/iter. ETA=0:00:22
[08/08 01:36:08] detectron2.evaluation.evaluator INFO: Inference done 339/500. Dataloading: 0.0022 s/iter. Inference: 0.0924 s/iter. Eval: 0.0141 s/iter. Total: 0.1088 s/iter. ETA=0:00:17
[08/08 01:36:13] detectron2.evaluation.evaluator INFO: Inference done 386/500. Dataloading: 0.0022 s/iter. Inference: 0.0921 s/iter. Eval: 0.0141 s/iter. Total: 0.1085 s/iter. ETA=0:00:12
[08/08 01:36:18] detectron2.evaluation.evaluator INFO: Inference done 434/500. Dataloading: 0.0022 s/iter. Inference: 0.0922 s/iter. Eval: 0.0138 s/iter. Total: 0.1083 s/iter. ETA=0:00:07
[08/08 01:36:24] detectron2.evaluation.evaluator INFO: Inference done 481/500. Dataloading: 0.0022 s/iter. Inference: 0.0922 s/iter. Eval: 0.0138 s/iter. Total: 0.1083 s/iter. ETA=0:00:02
[08/08 01:36:26] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.746066 (0.108578 s / iter per device, on 4 devices)
[08/08 01:36:26] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.091859 s / iter per device, on 4 devices)
[08/08 02:43:57] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 02:43:57] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 02:43:57] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 02:43:57] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 02:43:57] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 02:44:06] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0018 s/iter. Inference: 0.0986 s/iter. Eval: 0.0193 s/iter. Total: 0.1197 s/iter. ETA=0:00:58
[08/08 02:44:11] detectron2.evaluation.evaluator INFO: Inference done 57/500. Dataloading: 0.0024 s/iter. Inference: 0.0924 s/iter. Eval: 0.0154 s/iter. Total: 0.1103 s/iter. ETA=0:00:48
[08/08 02:44:16] detectron2.evaluation.evaluator INFO: Inference done 105/500. Dataloading: 0.0024 s/iter. Inference: 0.0906 s/iter. Eval: 0.0151 s/iter. Total: 0.1081 s/iter. ETA=0:00:42
[08/08 02:44:21] detectron2.evaluation.evaluator INFO: Inference done 152/500. Dataloading: 0.0023 s/iter. Inference: 0.0911 s/iter. Eval: 0.0141 s/iter. Total: 0.1076 s/iter. ETA=0:00:37
[08/08 02:44:26] detectron2.evaluation.evaluator INFO: Inference done 198/500. Dataloading: 0.0024 s/iter. Inference: 0.0919 s/iter. Eval: 0.0138 s/iter. Total: 0.1081 s/iter. ETA=0:00:32
[08/08 02:44:31] detectron2.evaluation.evaluator INFO: Inference done 245/500. Dataloading: 0.0023 s/iter. Inference: 0.0918 s/iter. Eval: 0.0138 s/iter. Total: 0.1079 s/iter. ETA=0:00:27
[08/08 02:44:36] detectron2.evaluation.evaluator INFO: Inference done 293/500. Dataloading: 0.0023 s/iter. Inference: 0.0916 s/iter. Eval: 0.0136 s/iter. Total: 0.1075 s/iter. ETA=0:00:22
[08/08 02:44:41] detectron2.evaluation.evaluator INFO: Inference done 336/500. Dataloading: 0.0023 s/iter. Inference: 0.0921 s/iter. Eval: 0.0144 s/iter. Total: 0.1088 s/iter. ETA=0:00:17
[08/08 02:44:46] detectron2.evaluation.evaluator INFO: Inference done 385/500. Dataloading: 0.0022 s/iter. Inference: 0.0917 s/iter. Eval: 0.0142 s/iter. Total: 0.1083 s/iter. ETA=0:00:12
[08/08 02:44:51] detectron2.evaluation.evaluator INFO: Inference done 433/500. Dataloading: 0.0022 s/iter. Inference: 0.0917 s/iter. Eval: 0.0139 s/iter. Total: 0.1079 s/iter. ETA=0:00:07
[08/08 02:44:57] detectron2.evaluation.evaluator INFO: Inference done 480/500. Dataloading: 0.0022 s/iter. Inference: 0.0917 s/iter. Eval: 0.0139 s/iter. Total: 0.1079 s/iter. ETA=0:00:02
[08/08 02:44:59] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.599239 (0.108281 s / iter per device, on 4 devices)
[08/08 02:44:59] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.091364 s / iter per device, on 4 devices)
[08/08 03:52:36] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 03:52:36] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 03:52:36] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 03:52:36] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 03:52:36] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 03:52:45] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0018 s/iter. Inference: 0.1026 s/iter. Eval: 0.0218 s/iter. Total: 0.1262 s/iter. ETA=0:01:01
[08/08 03:52:50] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0024 s/iter. Inference: 0.0956 s/iter. Eval: 0.0167 s/iter. Total: 0.1148 s/iter. ETA=0:00:50
[08/08 03:52:55] detectron2.evaluation.evaluator INFO: Inference done 102/500. Dataloading: 0.0023 s/iter. Inference: 0.0943 s/iter. Eval: 0.0161 s/iter. Total: 0.1128 s/iter. ETA=0:00:44
[08/08 03:53:00] detectron2.evaluation.evaluator INFO: Inference done 150/500. Dataloading: 0.0022 s/iter. Inference: 0.0942 s/iter. Eval: 0.0142 s/iter. Total: 0.1106 s/iter. ETA=0:00:38
[08/08 03:53:05] detectron2.evaluation.evaluator INFO: Inference done 198/500. Dataloading: 0.0022 s/iter. Inference: 0.0933 s/iter. Eval: 0.0136 s/iter. Total: 0.1093 s/iter. ETA=0:00:32
[08/08 03:53:10] detectron2.evaluation.evaluator INFO: Inference done 243/500. Dataloading: 0.0022 s/iter. Inference: 0.0938 s/iter. Eval: 0.0138 s/iter. Total: 0.1099 s/iter. ETA=0:00:28
[08/08 03:53:15] detectron2.evaluation.evaluator INFO: Inference done 291/500. Dataloading: 0.0024 s/iter. Inference: 0.0932 s/iter. Eval: 0.0135 s/iter. Total: 0.1091 s/iter. ETA=0:00:22
[08/08 03:53:20] detectron2.evaluation.evaluator INFO: Inference done 334/500. Dataloading: 0.0023 s/iter. Inference: 0.0935 s/iter. Eval: 0.0143 s/iter. Total: 0.1102 s/iter. ETA=0:00:18
[08/08 03:53:25] detectron2.evaluation.evaluator INFO: Inference done 381/500. Dataloading: 0.0023 s/iter. Inference: 0.0933 s/iter. Eval: 0.0142 s/iter. Total: 0.1098 s/iter. ETA=0:00:13
[08/08 03:53:30] detectron2.evaluation.evaluator INFO: Inference done 429/500. Dataloading: 0.0023 s/iter. Inference: 0.0931 s/iter. Eval: 0.0140 s/iter. Total: 0.1094 s/iter. ETA=0:00:07
[08/08 03:53:36] detectron2.evaluation.evaluator INFO: Inference done 475/500. Dataloading: 0.0024 s/iter. Inference: 0.0930 s/iter. Eval: 0.0141 s/iter. Total: 0.1095 s/iter. ETA=0:00:02
[08/08 03:53:38] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:54.395893 (0.109891 s / iter per device, on 4 devices)
[08/08 03:53:38] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.092774 s / iter per device, on 4 devices)
[08/08 05:01:13] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 05:01:13] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 05:01:13] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 05:01:13] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 05:01:13] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 05:01:22] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0016 s/iter. Inference: 0.1054 s/iter. Eval: 0.0180 s/iter. Total: 0.1250 s/iter. ETA=0:01:01
[08/08 05:01:27] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0027 s/iter. Inference: 0.0964 s/iter. Eval: 0.0153 s/iter. Total: 0.1144 s/iter. ETA=0:00:50
[08/08 05:01:32] detectron2.evaluation.evaluator INFO: Inference done 101/500. Dataloading: 0.0024 s/iter. Inference: 0.0948 s/iter. Eval: 0.0161 s/iter. Total: 0.1134 s/iter. ETA=0:00:45
[08/08 05:01:37] detectron2.evaluation.evaluator INFO: Inference done 150/500. Dataloading: 0.0023 s/iter. Inference: 0.0936 s/iter. Eval: 0.0143 s/iter. Total: 0.1103 s/iter. ETA=0:00:38
[08/08 05:01:42] detectron2.evaluation.evaluator INFO: Inference done 197/500. Dataloading: 0.0023 s/iter. Inference: 0.0932 s/iter. Eval: 0.0141 s/iter. Total: 0.1097 s/iter. ETA=0:00:33
[08/08 05:01:47] detectron2.evaluation.evaluator INFO: Inference done 242/500. Dataloading: 0.0023 s/iter. Inference: 0.0936 s/iter. Eval: 0.0141 s/iter. Total: 0.1101 s/iter. ETA=0:00:28
[08/08 05:01:52] detectron2.evaluation.evaluator INFO: Inference done 291/500. Dataloading: 0.0023 s/iter. Inference: 0.0927 s/iter. Eval: 0.0139 s/iter. Total: 0.1090 s/iter. ETA=0:00:22
[08/08 05:01:57] detectron2.evaluation.evaluator INFO: Inference done 333/500. Dataloading: 0.0024 s/iter. Inference: 0.0932 s/iter. Eval: 0.0146 s/iter. Total: 0.1103 s/iter. ETA=0:00:18
[08/08 05:02:02] detectron2.evaluation.evaluator INFO: Inference done 378/500. Dataloading: 0.0024 s/iter. Inference: 0.0933 s/iter. Eval: 0.0146 s/iter. Total: 0.1104 s/iter. ETA=0:00:13
[08/08 05:02:07] detectron2.evaluation.evaluator INFO: Inference done 425/500. Dataloading: 0.0024 s/iter. Inference: 0.0932 s/iter. Eval: 0.0143 s/iter. Total: 0.1100 s/iter. ETA=0:00:08
[08/08 05:02:12] detectron2.evaluation.evaluator INFO: Inference done 471/500. Dataloading: 0.0024 s/iter. Inference: 0.0930 s/iter. Eval: 0.0144 s/iter. Total: 0.1099 s/iter. ETA=0:00:03
[08/08 05:02:16] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:54.543430 (0.110189 s / iter per device, on 4 devices)
[08/08 05:02:16] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.092600 s / iter per device, on 4 devices)
[08/08 06:10:05] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 06:10:05] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 06:10:05] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 06:10:05] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 06:10:05] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 06:10:14] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0021 s/iter. Inference: 0.1098 s/iter. Eval: 0.0215 s/iter. Total: 0.1334 s/iter. ETA=0:01:05
[08/08 06:10:20] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0024 s/iter. Inference: 0.0960 s/iter. Eval: 0.0167 s/iter. Total: 0.1152 s/iter. ETA=0:00:51
[08/08 06:10:25] detectron2.evaluation.evaluator INFO: Inference done 104/500. Dataloading: 0.0022 s/iter. Inference: 0.0925 s/iter. Eval: 0.0157 s/iter. Total: 0.1105 s/iter. ETA=0:00:43
[08/08 06:10:30] detectron2.evaluation.evaluator INFO: Inference done 151/500. Dataloading: 0.0022 s/iter. Inference: 0.0927 s/iter. Eval: 0.0143 s/iter. Total: 0.1092 s/iter. ETA=0:00:38
[08/08 06:10:35] detectron2.evaluation.evaluator INFO: Inference done 198/500. Dataloading: 0.0022 s/iter. Inference: 0.0926 s/iter. Eval: 0.0138 s/iter. Total: 0.1087 s/iter. ETA=0:00:32
[08/08 06:10:40] detectron2.evaluation.evaluator INFO: Inference done 244/500. Dataloading: 0.0023 s/iter. Inference: 0.0928 s/iter. Eval: 0.0139 s/iter. Total: 0.1091 s/iter. ETA=0:00:27
[08/08 06:10:45] detectron2.evaluation.evaluator INFO: Inference done 292/500. Dataloading: 0.0023 s/iter. Inference: 0.0922 s/iter. Eval: 0.0137 s/iter. Total: 0.1082 s/iter. ETA=0:00:22
[08/08 06:10:50] detectron2.evaluation.evaluator INFO: Inference done 335/500. Dataloading: 0.0023 s/iter. Inference: 0.0926 s/iter. Eval: 0.0146 s/iter. Total: 0.1095 s/iter. ETA=0:00:18
[08/08 06:10:55] detectron2.evaluation.evaluator INFO: Inference done 383/500. Dataloading: 0.0022 s/iter. Inference: 0.0920 s/iter. Eval: 0.0146 s/iter. Total: 0.1090 s/iter. ETA=0:00:12
[08/08 06:11:00] detectron2.evaluation.evaluator INFO: Inference done 429/500. Dataloading: 0.0023 s/iter. Inference: 0.0924 s/iter. Eval: 0.0143 s/iter. Total: 0.1090 s/iter. ETA=0:00:07
[08/08 06:11:05] detectron2.evaluation.evaluator INFO: Inference done 474/500. Dataloading: 0.0023 s/iter. Inference: 0.0926 s/iter. Eval: 0.0145 s/iter. Total: 0.1093 s/iter. ETA=0:00:02
[08/08 06:11:08] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:54.257109 (0.109610 s / iter per device, on 4 devices)
[08/08 06:11:08] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.092225 s / iter per device, on 4 devices)
[08/08 07:18:47] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 07:18:47] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 07:18:47] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 07:18:47] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 07:18:47] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 07:18:57] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0018 s/iter. Inference: 0.1144 s/iter. Eval: 0.0234 s/iter. Total: 0.1396 s/iter. ETA=0:01:08
[08/08 07:19:02] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0022 s/iter. Inference: 0.0961 s/iter. Eval: 0.0165 s/iter. Total: 0.1148 s/iter. ETA=0:00:50
[08/08 07:19:07] detectron2.evaluation.evaluator INFO: Inference done 103/500. Dataloading: 0.0022 s/iter. Inference: 0.0936 s/iter. Eval: 0.0156 s/iter. Total: 0.1114 s/iter. ETA=0:00:44
[08/08 07:19:12] detectron2.evaluation.evaluator INFO: Inference done 152/500. Dataloading: 0.0023 s/iter. Inference: 0.0920 s/iter. Eval: 0.0140 s/iter. Total: 0.1084 s/iter. ETA=0:00:37
[08/08 07:19:17] detectron2.evaluation.evaluator INFO: Inference done 201/500. Dataloading: 0.0023 s/iter. Inference: 0.0911 s/iter. Eval: 0.0136 s/iter. Total: 0.1071 s/iter. ETA=0:00:32
[08/08 07:19:22] detectron2.evaluation.evaluator INFO: Inference done 250/500. Dataloading: 0.0023 s/iter. Inference: 0.0907 s/iter. Eval: 0.0135 s/iter. Total: 0.1065 s/iter. ETA=0:00:26
[08/08 07:19:27] detectron2.evaluation.evaluator INFO: Inference done 299/500. Dataloading: 0.0022 s/iter. Inference: 0.0901 s/iter. Eval: 0.0134 s/iter. Total: 0.1058 s/iter. ETA=0:00:21
[08/08 07:19:32] detectron2.evaluation.evaluator INFO: Inference done 343/500. Dataloading: 0.0022 s/iter. Inference: 0.0906 s/iter. Eval: 0.0142 s/iter. Total: 0.1070 s/iter. ETA=0:00:16
[08/08 07:19:37] detectron2.evaluation.evaluator INFO: Inference done 391/500. Dataloading: 0.0022 s/iter. Inference: 0.0903 s/iter. Eval: 0.0141 s/iter. Total: 0.1067 s/iter. ETA=0:00:11
[08/08 07:19:42] detectron2.evaluation.evaluator INFO: Inference done 440/500. Dataloading: 0.0022 s/iter. Inference: 0.0902 s/iter. Eval: 0.0138 s/iter. Total: 0.1063 s/iter. ETA=0:00:06
[08/08 07:19:48] detectron2.evaluation.evaluator INFO: Inference done 489/500. Dataloading: 0.0022 s/iter. Inference: 0.0900 s/iter. Eval: 0.0138 s/iter. Total: 0.1061 s/iter. ETA=0:00:01
[08/08 07:19:49] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:52.801218 (0.106669 s / iter per device, on 4 devices)
[08/08 07:19:49] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:44 (0.089887 s / iter per device, on 4 devices)
[08/08 08:27:34] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 08:27:34] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 08:27:34] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 08:27:34] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 08:27:34] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 08:27:43] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0038 s/iter. Inference: 0.0977 s/iter. Eval: 0.0194 s/iter. Total: 0.1209 s/iter. ETA=0:00:59
[08/08 08:27:48] detectron2.evaluation.evaluator INFO: Inference done 57/500. Dataloading: 0.0023 s/iter. Inference: 0.0934 s/iter. Eval: 0.0147 s/iter. Total: 0.1105 s/iter. ETA=0:00:48
[08/08 08:27:53] detectron2.evaluation.evaluator INFO: Inference done 102/500. Dataloading: 0.0022 s/iter. Inference: 0.0935 s/iter. Eval: 0.0154 s/iter. Total: 0.1112 s/iter. ETA=0:00:44
[08/08 08:27:58] detectron2.evaluation.evaluator INFO: Inference done 151/500. Dataloading: 0.0022 s/iter. Inference: 0.0925 s/iter. Eval: 0.0141 s/iter. Total: 0.1090 s/iter. ETA=0:00:38
[08/08 08:28:04] detectron2.evaluation.evaluator INFO: Inference done 198/500. Dataloading: 0.0022 s/iter. Inference: 0.0927 s/iter. Eval: 0.0135 s/iter. Total: 0.1085 s/iter. ETA=0:00:32
[08/08 08:28:09] detectron2.evaluation.evaluator INFO: Inference done 243/500. Dataloading: 0.0023 s/iter. Inference: 0.0931 s/iter. Eval: 0.0138 s/iter. Total: 0.1093 s/iter. ETA=0:00:28
[08/08 08:28:14] detectron2.evaluation.evaluator INFO: Inference done 290/500. Dataloading: 0.0023 s/iter. Inference: 0.0931 s/iter. Eval: 0.0136 s/iter. Total: 0.1090 s/iter. ETA=0:00:22
[08/08 08:28:19] detectron2.evaluation.evaluator INFO: Inference done 332/500. Dataloading: 0.0022 s/iter. Inference: 0.0936 s/iter. Eval: 0.0144 s/iter. Total: 0.1103 s/iter. ETA=0:00:18
[08/08 08:28:24] detectron2.evaluation.evaluator INFO: Inference done 379/500. Dataloading: 0.0022 s/iter. Inference: 0.0933 s/iter. Eval: 0.0144 s/iter. Total: 0.1100 s/iter. ETA=0:00:13
[08/08 08:28:29] detectron2.evaluation.evaluator INFO: Inference done 428/500. Dataloading: 0.0022 s/iter. Inference: 0.0928 s/iter. Eval: 0.0140 s/iter. Total: 0.1091 s/iter. ETA=0:00:07
[08/08 08:28:34] detectron2.evaluation.evaluator INFO: Inference done 475/500. Dataloading: 0.0022 s/iter. Inference: 0.0925 s/iter. Eval: 0.0141 s/iter. Total: 0.1089 s/iter. ETA=0:00:02
[08/08 08:28:37] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:54.306032 (0.109709 s / iter per device, on 4 devices)
[08/08 08:28:37] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.092400 s / iter per device, on 4 devices)
[08/08 09:36:17] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 09:36:17] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 09:36:17] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 09:36:17] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 09:36:17] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 09:36:26] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0048 s/iter. Inference: 0.1026 s/iter. Eval: 0.0215 s/iter. Total: 0.1290 s/iter. ETA=0:01:03
[08/08 09:36:31] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0025 s/iter. Inference: 0.0950 s/iter. Eval: 0.0163 s/iter. Total: 0.1139 s/iter. ETA=0:00:50
[08/08 09:36:36] detectron2.evaluation.evaluator INFO: Inference done 102/500. Dataloading: 0.0025 s/iter. Inference: 0.0929 s/iter. Eval: 0.0162 s/iter. Total: 0.1116 s/iter. ETA=0:00:44
[08/08 09:36:41] detectron2.evaluation.evaluator INFO: Inference done 152/500. Dataloading: 0.0023 s/iter. Inference: 0.0916 s/iter. Eval: 0.0143 s/iter. Total: 0.1082 s/iter. ETA=0:00:37
[08/08 09:36:46] detectron2.evaluation.evaluator INFO: Inference done 201/500. Dataloading: 0.0022 s/iter. Inference: 0.0913 s/iter. Eval: 0.0136 s/iter. Total: 0.1072 s/iter. ETA=0:00:32
[08/08 09:36:51] detectron2.evaluation.evaluator INFO: Inference done 247/500. Dataloading: 0.0023 s/iter. Inference: 0.0916 s/iter. Eval: 0.0136 s/iter. Total: 0.1075 s/iter. ETA=0:00:27
[08/08 09:36:57] detectron2.evaluation.evaluator INFO: Inference done 295/500. Dataloading: 0.0022 s/iter. Inference: 0.0913 s/iter. Eval: 0.0135 s/iter. Total: 0.1070 s/iter. ETA=0:00:21
[08/08 09:37:02] detectron2.evaluation.evaluator INFO: Inference done 338/500. Dataloading: 0.0022 s/iter. Inference: 0.0918 s/iter. Eval: 0.0142 s/iter. Total: 0.1082 s/iter. ETA=0:00:17
[08/08 09:37:07] detectron2.evaluation.evaluator INFO: Inference done 385/500. Dataloading: 0.0022 s/iter. Inference: 0.0918 s/iter. Eval: 0.0142 s/iter. Total: 0.1082 s/iter. ETA=0:00:12
[08/08 09:37:12] detectron2.evaluation.evaluator INFO: Inference done 432/500. Dataloading: 0.0023 s/iter. Inference: 0.0919 s/iter. Eval: 0.0138 s/iter. Total: 0.1080 s/iter. ETA=0:00:07
[08/08 09:37:17] detectron2.evaluation.evaluator INFO: Inference done 478/500. Dataloading: 0.0022 s/iter. Inference: 0.0919 s/iter. Eval: 0.0139 s/iter. Total: 0.1081 s/iter. ETA=0:00:02
[08/08 09:37:19] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.735806 (0.108557 s / iter per device, on 4 devices)
[08/08 09:37:19] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.091690 s / iter per device, on 4 devices)
[08/08 10:45:04] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 10:45:04] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 10:45:04] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 10:45:04] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 10:45:04] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 10:45:11] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0023 s/iter. Inference: 0.1046 s/iter. Eval: 0.0191 s/iter. Total: 0.1260 s/iter. ETA=0:01:01
[08/08 10:45:16] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0021 s/iter. Inference: 0.0956 s/iter. Eval: 0.0151 s/iter. Total: 0.1130 s/iter. ETA=0:00:50
[08/08 10:45:21] detectron2.evaluation.evaluator INFO: Inference done 103/500. Dataloading: 0.0020 s/iter. Inference: 0.0935 s/iter. Eval: 0.0149 s/iter. Total: 0.1105 s/iter. ETA=0:00:43
[08/08 10:45:26] detectron2.evaluation.evaluator INFO: Inference done 151/500. Dataloading: 0.0021 s/iter. Inference: 0.0930 s/iter. Eval: 0.0136 s/iter. Total: 0.1087 s/iter. ETA=0:00:37
[08/08 10:45:31] detectron2.evaluation.evaluator INFO: Inference done 197/500. Dataloading: 0.0022 s/iter. Inference: 0.0933 s/iter. Eval: 0.0133 s/iter. Total: 0.1087 s/iter. ETA=0:00:32
[08/08 10:45:36] detectron2.evaluation.evaluator INFO: Inference done 242/500. Dataloading: 0.0022 s/iter. Inference: 0.0934 s/iter. Eval: 0.0136 s/iter. Total: 0.1093 s/iter. ETA=0:00:28
[08/08 10:45:41] detectron2.evaluation.evaluator INFO: Inference done 291/500. Dataloading: 0.0022 s/iter. Inference: 0.0928 s/iter. Eval: 0.0134 s/iter. Total: 0.1084 s/iter. ETA=0:00:22
[08/08 10:45:46] detectron2.evaluation.evaluator INFO: Inference done 334/500. Dataloading: 0.0022 s/iter. Inference: 0.0932 s/iter. Eval: 0.0143 s/iter. Total: 0.1097 s/iter. ETA=0:00:18
[08/08 10:45:51] detectron2.evaluation.evaluator INFO: Inference done 382/500. Dataloading: 0.0022 s/iter. Inference: 0.0927 s/iter. Eval: 0.0141 s/iter. Total: 0.1091 s/iter. ETA=0:00:12
[08/08 10:45:56] detectron2.evaluation.evaluator INFO: Inference done 430/500. Dataloading: 0.0022 s/iter. Inference: 0.0926 s/iter. Eval: 0.0138 s/iter. Total: 0.1087 s/iter. ETA=0:00:07
[08/08 10:46:01] detectron2.evaluation.evaluator INFO: Inference done 477/500. Dataloading: 0.0022 s/iter. Inference: 0.0924 s/iter. Eval: 0.0139 s/iter. Total: 0.1085 s/iter. ETA=0:00:02
[08/08 10:46:04] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.859532 (0.108807 s / iter per device, on 4 devices)
[08/08 10:46:04] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.092026 s / iter per device, on 4 devices)
[08/08 11:53:49] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 11:53:49] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 11:53:49] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 11:53:49] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 11:53:49] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 11:53:58] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0015 s/iter. Inference: 0.0943 s/iter. Eval: 0.0176 s/iter. Total: 0.1135 s/iter. ETA=0:00:55
[08/08 11:54:03] detectron2.evaluation.evaluator INFO: Inference done 55/500. Dataloading: 0.0028 s/iter. Inference: 0.0965 s/iter. Eval: 0.0161 s/iter. Total: 0.1155 s/iter. ETA=0:00:51
[08/08 11:54:08] detectron2.evaluation.evaluator INFO: Inference done 102/500. Dataloading: 0.0024 s/iter. Inference: 0.0939 s/iter. Eval: 0.0155 s/iter. Total: 0.1119 s/iter. ETA=0:00:44
[08/08 11:54:14] detectron2.evaluation.evaluator INFO: Inference done 152/500. Dataloading: 0.0023 s/iter. Inference: 0.0919 s/iter. Eval: 0.0141 s/iter. Total: 0.1084 s/iter. ETA=0:00:37
[08/08 11:54:19] detectron2.evaluation.evaluator INFO: Inference done 199/500. Dataloading: 0.0023 s/iter. Inference: 0.0921 s/iter. Eval: 0.0137 s/iter. Total: 0.1082 s/iter. ETA=0:00:32
[08/08 11:54:24] detectron2.evaluation.evaluator INFO: Inference done 245/500. Dataloading: 0.0023 s/iter. Inference: 0.0925 s/iter. Eval: 0.0138 s/iter. Total: 0.1087 s/iter. ETA=0:00:27
[08/08 11:54:29] detectron2.evaluation.evaluator INFO: Inference done 293/500. Dataloading: 0.0023 s/iter. Inference: 0.0921 s/iter. Eval: 0.0137 s/iter. Total: 0.1082 s/iter. ETA=0:00:22
[08/08 11:54:34] detectron2.evaluation.evaluator INFO: Inference done 336/500. Dataloading: 0.0024 s/iter. Inference: 0.0926 s/iter. Eval: 0.0145 s/iter. Total: 0.1096 s/iter. ETA=0:00:17
[08/08 11:54:39] detectron2.evaluation.evaluator INFO: Inference done 385/500. Dataloading: 0.0024 s/iter. Inference: 0.0920 s/iter. Eval: 0.0145 s/iter. Total: 0.1089 s/iter. ETA=0:00:12
[08/08 11:54:44] detectron2.evaluation.evaluator INFO: Inference done 434/500. Dataloading: 0.0024 s/iter. Inference: 0.0916 s/iter. Eval: 0.0141 s/iter. Total: 0.1082 s/iter. ETA=0:00:07
[08/08 11:54:49] detectron2.evaluation.evaluator INFO: Inference done 481/500. Dataloading: 0.0024 s/iter. Inference: 0.0914 s/iter. Eval: 0.0142 s/iter. Total: 0.1080 s/iter. ETA=0:00:02
[08/08 11:54:51] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.721013 (0.108527 s / iter per device, on 4 devices)
[08/08 11:54:51] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.091172 s / iter per device, on 4 devices)
[08/08 13:02:19] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 13:02:19] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 13:02:19] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 13:02:19] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 13:02:19] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 13:02:28] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0017 s/iter. Inference: 0.0958 s/iter. Eval: 0.0182 s/iter. Total: 0.1156 s/iter. ETA=0:00:56
[08/08 13:02:33] detectron2.evaluation.evaluator INFO: Inference done 57/500. Dataloading: 0.0023 s/iter. Inference: 0.0924 s/iter. Eval: 0.0150 s/iter. Total: 0.1098 s/iter. ETA=0:00:48
[08/08 13:02:38] detectron2.evaluation.evaluator INFO: Inference done 104/500. Dataloading: 0.0024 s/iter. Inference: 0.0912 s/iter. Eval: 0.0152 s/iter. Total: 0.1088 s/iter. ETA=0:00:43
[08/08 13:02:43] detectron2.evaluation.evaluator INFO: Inference done 152/500. Dataloading: 0.0022 s/iter. Inference: 0.0915 s/iter. Eval: 0.0138 s/iter. Total: 0.1077 s/iter. ETA=0:00:37
[08/08 13:02:48] detectron2.evaluation.evaluator INFO: Inference done 202/500. Dataloading: 0.0022 s/iter. Inference: 0.0906 s/iter. Eval: 0.0134 s/iter. Total: 0.1063 s/iter. ETA=0:00:31
[08/08 13:02:53] detectron2.evaluation.evaluator INFO: Inference done 249/500. Dataloading: 0.0022 s/iter. Inference: 0.0908 s/iter. Eval: 0.0133 s/iter. Total: 0.1063 s/iter. ETA=0:00:26
[08/08 13:02:58] detectron2.evaluation.evaluator INFO: Inference done 298/500. Dataloading: 0.0022 s/iter. Inference: 0.0905 s/iter. Eval: 0.0133 s/iter. Total: 0.1060 s/iter. ETA=0:00:21
[08/08 13:03:03] detectron2.evaluation.evaluator INFO: Inference done 342/500. Dataloading: 0.0022 s/iter. Inference: 0.0909 s/iter. Eval: 0.0141 s/iter. Total: 0.1072 s/iter. ETA=0:00:16
[08/08 13:03:08] detectron2.evaluation.evaluator INFO: Inference done 390/500. Dataloading: 0.0022 s/iter. Inference: 0.0905 s/iter. Eval: 0.0140 s/iter. Total: 0.1068 s/iter. ETA=0:00:11
[08/08 13:03:14] detectron2.evaluation.evaluator INFO: Inference done 439/500. Dataloading: 0.0022 s/iter. Inference: 0.0904 s/iter. Eval: 0.0139 s/iter. Total: 0.1066 s/iter. ETA=0:00:06
[08/08 13:03:19] detectron2.evaluation.evaluator INFO: Inference done 487/500. Dataloading: 0.0023 s/iter. Inference: 0.0902 s/iter. Eval: 0.0139 s/iter. Total: 0.1064 s/iter. ETA=0:00:01
[08/08 13:03:20] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:52.949956 (0.106970 s / iter per device, on 4 devices)
[08/08 13:03:20] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:44 (0.090152 s / iter per device, on 4 devices)
[08/08 14:10:50] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 14:10:50] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 14:10:50] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 14:10:50] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 14:10:50] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 14:10:59] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0019 s/iter. Inference: 0.0968 s/iter. Eval: 0.0191 s/iter. Total: 0.1178 s/iter. ETA=0:00:57
[08/08 14:11:04] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0024 s/iter. Inference: 0.0946 s/iter. Eval: 0.0160 s/iter. Total: 0.1131 s/iter. ETA=0:00:50
[08/08 14:11:09] detectron2.evaluation.evaluator INFO: Inference done 101/500. Dataloading: 0.0026 s/iter. Inference: 0.0936 s/iter. Eval: 0.0159 s/iter. Total: 0.1122 s/iter. ETA=0:00:44
[08/08 14:11:15] detectron2.evaluation.evaluator INFO: Inference done 150/500. Dataloading: 0.0025 s/iter. Inference: 0.0930 s/iter. Eval: 0.0139 s/iter. Total: 0.1094 s/iter. ETA=0:00:38
[08/08 14:11:20] detectron2.evaluation.evaluator INFO: Inference done 196/500. Dataloading: 0.0026 s/iter. Inference: 0.0934 s/iter. Eval: 0.0133 s/iter. Total: 0.1093 s/iter. ETA=0:00:33
[08/08 14:11:25] detectron2.evaluation.evaluator INFO: Inference done 241/500. Dataloading: 0.0025 s/iter. Inference: 0.0936 s/iter. Eval: 0.0135 s/iter. Total: 0.1098 s/iter. ETA=0:00:28
[08/08 14:11:30] detectron2.evaluation.evaluator INFO: Inference done 288/500. Dataloading: 0.0026 s/iter. Inference: 0.0934 s/iter. Eval: 0.0134 s/iter. Total: 0.1095 s/iter. ETA=0:00:23
[08/08 14:11:35] detectron2.evaluation.evaluator INFO: Inference done 330/500. Dataloading: 0.0025 s/iter. Inference: 0.0939 s/iter. Eval: 0.0142 s/iter. Total: 0.1107 s/iter. ETA=0:00:18
[08/08 14:11:40] detectron2.evaluation.evaluator INFO: Inference done 376/500. Dataloading: 0.0025 s/iter. Inference: 0.0939 s/iter. Eval: 0.0143 s/iter. Total: 0.1107 s/iter. ETA=0:00:13
[08/08 14:11:45] detectron2.evaluation.evaluator INFO: Inference done 423/500. Dataloading: 0.0025 s/iter. Inference: 0.0937 s/iter. Eval: 0.0140 s/iter. Total: 0.1102 s/iter. ETA=0:00:08
[08/08 14:11:50] detectron2.evaluation.evaluator INFO: Inference done 469/500. Dataloading: 0.0025 s/iter. Inference: 0.0937 s/iter. Eval: 0.0141 s/iter. Total: 0.1103 s/iter. ETA=0:00:03
[08/08 14:11:53] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:54.732858 (0.110571 s / iter per device, on 4 devices)
[08/08 14:11:53] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:46 (0.093291 s / iter per device, on 4 devices)
[08/08 15:19:24] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 15:19:24] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 15:19:24] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 15:19:24] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 15:19:24] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 15:19:34] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0017 s/iter. Inference: 0.1022 s/iter. Eval: 0.0190 s/iter. Total: 0.1230 s/iter. ETA=0:01:00
[08/08 15:19:39] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0022 s/iter. Inference: 0.0951 s/iter. Eval: 0.0163 s/iter. Total: 0.1136 s/iter. ETA=0:00:50
[08/08 15:19:44] detectron2.evaluation.evaluator INFO: Inference done 103/500. Dataloading: 0.0022 s/iter. Inference: 0.0924 s/iter. Eval: 0.0158 s/iter. Total: 0.1105 s/iter. ETA=0:00:43
[08/08 15:19:49] detectron2.evaluation.evaluator INFO: Inference done 152/500. Dataloading: 0.0023 s/iter. Inference: 0.0915 s/iter. Eval: 0.0143 s/iter. Total: 0.1082 s/iter. ETA=0:00:37
[08/08 15:19:54] detectron2.evaluation.evaluator INFO: Inference done 200/500. Dataloading: 0.0026 s/iter. Inference: 0.0912 s/iter. Eval: 0.0138 s/iter. Total: 0.1076 s/iter. ETA=0:00:32
[08/08 15:19:59] detectron2.evaluation.evaluator INFO: Inference done 247/500. Dataloading: 0.0025 s/iter. Inference: 0.0913 s/iter. Eval: 0.0138 s/iter. Total: 0.1077 s/iter. ETA=0:00:27
[08/08 15:20:04] detectron2.evaluation.evaluator INFO: Inference done 295/500. Dataloading: 0.0025 s/iter. Inference: 0.0911 s/iter. Eval: 0.0136 s/iter. Total: 0.1072 s/iter. ETA=0:00:21
[08/08 15:20:09] detectron2.evaluation.evaluator INFO: Inference done 337/500. Dataloading: 0.0025 s/iter. Inference: 0.0920 s/iter. Eval: 0.0145 s/iter. Total: 0.1090 s/iter. ETA=0:00:17
[08/08 15:20:14] detectron2.evaluation.evaluator INFO: Inference done 383/500. Dataloading: 0.0025 s/iter. Inference: 0.0922 s/iter. Eval: 0.0144 s/iter. Total: 0.1092 s/iter. ETA=0:00:12
[08/08 15:20:19] detectron2.evaluation.evaluator INFO: Inference done 432/500. Dataloading: 0.0024 s/iter. Inference: 0.0919 s/iter. Eval: 0.0142 s/iter. Total: 0.1086 s/iter. ETA=0:00:07
[08/08 15:20:24] detectron2.evaluation.evaluator INFO: Inference done 478/500. Dataloading: 0.0024 s/iter. Inference: 0.0920 s/iter. Eval: 0.0142 s/iter. Total: 0.1086 s/iter. ETA=0:00:02
[08/08 15:20:27] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.896563 (0.108882 s / iter per device, on 4 devices)
[08/08 15:20:27] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.091587 s / iter per device, on 4 devices)
[08/08 16:27:52] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 16:27:52] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 16:27:52] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 16:27:52] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 16:27:52] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 16:28:02] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0017 s/iter. Inference: 0.1102 s/iter. Eval: 0.0193 s/iter. Total: 0.1312 s/iter. ETA=0:01:04
[08/08 16:28:07] detectron2.evaluation.evaluator INFO: Inference done 57/500. Dataloading: 0.0020 s/iter. Inference: 0.0953 s/iter. Eval: 0.0156 s/iter. Total: 0.1129 s/iter. ETA=0:00:50
[08/08 16:28:12] detectron2.evaluation.evaluator INFO: Inference done 103/500. Dataloading: 0.0023 s/iter. Inference: 0.0931 s/iter. Eval: 0.0161 s/iter. Total: 0.1116 s/iter. ETA=0:00:44
[08/08 16:28:17] detectron2.evaluation.evaluator INFO: Inference done 152/500. Dataloading: 0.0022 s/iter. Inference: 0.0923 s/iter. Eval: 0.0144 s/iter. Total: 0.1090 s/iter. ETA=0:00:37
[08/08 16:28:22] detectron2.evaluation.evaluator INFO: Inference done 200/500. Dataloading: 0.0022 s/iter. Inference: 0.0918 s/iter. Eval: 0.0138 s/iter. Total: 0.1079 s/iter. ETA=0:00:32
[08/08 16:28:27] detectron2.evaluation.evaluator INFO: Inference done 246/500. Dataloading: 0.0022 s/iter. Inference: 0.0921 s/iter. Eval: 0.0139 s/iter. Total: 0.1082 s/iter. ETA=0:00:27
[08/08 16:28:32] detectron2.evaluation.evaluator INFO: Inference done 295/500. Dataloading: 0.0023 s/iter. Inference: 0.0913 s/iter. Eval: 0.0138 s/iter. Total: 0.1073 s/iter. ETA=0:00:22
[08/08 16:28:37] detectron2.evaluation.evaluator INFO: Inference done 339/500. Dataloading: 0.0022 s/iter. Inference: 0.0916 s/iter. Eval: 0.0145 s/iter. Total: 0.1083 s/iter. ETA=0:00:17
[08/08 16:28:42] detectron2.evaluation.evaluator INFO: Inference done 387/500. Dataloading: 0.0023 s/iter. Inference: 0.0914 s/iter. Eval: 0.0143 s/iter. Total: 0.1081 s/iter. ETA=0:00:12
[08/08 16:28:47] detectron2.evaluation.evaluator INFO: Inference done 435/500. Dataloading: 0.0023 s/iter. Inference: 0.0915 s/iter. Eval: 0.0140 s/iter. Total: 0.1078 s/iter. ETA=0:00:07
[08/08 16:28:52] detectron2.evaluation.evaluator INFO: Inference done 482/500. Dataloading: 0.0023 s/iter. Inference: 0.0914 s/iter. Eval: 0.0140 s/iter. Total: 0.1078 s/iter. ETA=0:00:01
[08/08 16:28:55] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.656319 (0.108397 s / iter per device, on 4 devices)
[08/08 16:28:55] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.091306 s / iter per device, on 4 devices)
[08/08 17:36:01] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 17:36:01] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 17:36:01] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 17:36:01] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 17:36:01] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 17:36:10] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0017 s/iter. Inference: 0.0974 s/iter. Eval: 0.0178 s/iter. Total: 0.1169 s/iter. ETA=0:00:57
[08/08 17:36:15] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0019 s/iter. Inference: 0.0947 s/iter. Eval: 0.0160 s/iter. Total: 0.1127 s/iter. ETA=0:00:50
[08/08 17:36:20] detectron2.evaluation.evaluator INFO: Inference done 104/500. Dataloading: 0.0020 s/iter. Inference: 0.0919 s/iter. Eval: 0.0149 s/iter. Total: 0.1089 s/iter. ETA=0:00:43
[08/08 17:36:25] detectron2.evaluation.evaluator INFO: Inference done 152/500. Dataloading: 0.0021 s/iter. Inference: 0.0918 s/iter. Eval: 0.0139 s/iter. Total: 0.1079 s/iter. ETA=0:00:37
[08/08 17:36:30] detectron2.evaluation.evaluator INFO: Inference done 199/500. Dataloading: 0.0021 s/iter. Inference: 0.0919 s/iter. Eval: 0.0135 s/iter. Total: 0.1076 s/iter. ETA=0:00:32
[08/08 17:36:35] detectron2.evaluation.evaluator INFO: Inference done 245/500. Dataloading: 0.0021 s/iter. Inference: 0.0921 s/iter. Eval: 0.0136 s/iter. Total: 0.1078 s/iter. ETA=0:00:27
[08/08 17:36:40] detectron2.evaluation.evaluator INFO: Inference done 294/500. Dataloading: 0.0021 s/iter. Inference: 0.0914 s/iter. Eval: 0.0134 s/iter. Total: 0.1070 s/iter. ETA=0:00:22
[08/08 17:36:45] detectron2.evaluation.evaluator INFO: Inference done 336/500. Dataloading: 0.0021 s/iter. Inference: 0.0923 s/iter. Eval: 0.0143 s/iter. Total: 0.1087 s/iter. ETA=0:00:17
[08/08 17:36:50] detectron2.evaluation.evaluator INFO: Inference done 383/500. Dataloading: 0.0022 s/iter. Inference: 0.0919 s/iter. Eval: 0.0144 s/iter. Total: 0.1085 s/iter. ETA=0:00:12
[08/08 17:36:55] detectron2.evaluation.evaluator INFO: Inference done 431/500. Dataloading: 0.0022 s/iter. Inference: 0.0920 s/iter. Eval: 0.0140 s/iter. Total: 0.1082 s/iter. ETA=0:00:07
[08/08 17:37:01] detectron2.evaluation.evaluator INFO: Inference done 477/500. Dataloading: 0.0022 s/iter. Inference: 0.0920 s/iter. Eval: 0.0141 s/iter. Total: 0.1084 s/iter. ETA=0:00:02
[08/08 17:37:03] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.815519 (0.108718 s / iter per device, on 4 devices)
[08/08 17:37:03] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.091777 s / iter per device, on 4 devices)
[08/08 18:44:42] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 18:44:42] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 18:44:42] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 18:44:42] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 18:44:42] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 18:44:51] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0018 s/iter. Inference: 0.1010 s/iter. Eval: 0.0200 s/iter. Total: 0.1228 s/iter. ETA=0:01:00
[08/08 18:44:56] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0024 s/iter. Inference: 0.0964 s/iter. Eval: 0.0160 s/iter. Total: 0.1148 s/iter. ETA=0:00:50
[08/08 18:45:01] detectron2.evaluation.evaluator INFO: Inference done 105/500. Dataloading: 0.0022 s/iter. Inference: 0.0925 s/iter. Eval: 0.0150 s/iter. Total: 0.1097 s/iter. ETA=0:00:43
[08/08 18:45:06] detectron2.evaluation.evaluator INFO: Inference done 153/500. Dataloading: 0.0022 s/iter. Inference: 0.0922 s/iter. Eval: 0.0137 s/iter. Total: 0.1081 s/iter. ETA=0:00:37
[08/08 18:45:11] detectron2.evaluation.evaluator INFO: Inference done 200/500. Dataloading: 0.0024 s/iter. Inference: 0.0924 s/iter. Eval: 0.0132 s/iter. Total: 0.1080 s/iter. ETA=0:00:32
[08/08 18:45:16] detectron2.evaluation.evaluator INFO: Inference done 246/500. Dataloading: 0.0023 s/iter. Inference: 0.0928 s/iter. Eval: 0.0133 s/iter. Total: 0.1085 s/iter. ETA=0:00:27
[08/08 18:45:21] detectron2.evaluation.evaluator INFO: Inference done 293/500. Dataloading: 0.0023 s/iter. Inference: 0.0926 s/iter. Eval: 0.0133 s/iter. Total: 0.1082 s/iter. ETA=0:00:22
[08/08 18:45:26] detectron2.evaluation.evaluator INFO: Inference done 337/500. Dataloading: 0.0023 s/iter. Inference: 0.0926 s/iter. Eval: 0.0141 s/iter. Total: 0.1091 s/iter. ETA=0:00:17
[08/08 18:45:31] detectron2.evaluation.evaluator INFO: Inference done 385/500. Dataloading: 0.0023 s/iter. Inference: 0.0923 s/iter. Eval: 0.0140 s/iter. Total: 0.1087 s/iter. ETA=0:00:12
[08/08 18:45:37] detectron2.evaluation.evaluator INFO: Inference done 434/500. Dataloading: 0.0023 s/iter. Inference: 0.0922 s/iter. Eval: 0.0137 s/iter. Total: 0.1082 s/iter. ETA=0:00:07
[08/08 18:45:42] detectron2.evaluation.evaluator INFO: Inference done 482/500. Dataloading: 0.0023 s/iter. Inference: 0.0919 s/iter. Eval: 0.0137 s/iter. Total: 0.1079 s/iter. ETA=0:00:01
[08/08 18:45:44] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.702241 (0.108489 s / iter per device, on 4 devices)
[08/08 18:45:44] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.091706 s / iter per device, on 4 devices)
[08/08 19:53:22] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 19:53:22] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 19:53:22] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 19:53:22] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 19:53:22] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 19:53:30] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0033 s/iter. Inference: 0.1038 s/iter. Eval: 0.0227 s/iter. Total: 0.1298 s/iter. ETA=0:01:03
[08/08 19:53:35] detectron2.evaluation.evaluator INFO: Inference done 57/500. Dataloading: 0.0023 s/iter. Inference: 0.0935 s/iter. Eval: 0.0160 s/iter. Total: 0.1119 s/iter. ETA=0:00:49
[08/08 19:53:40] detectron2.evaluation.evaluator INFO: Inference done 102/500. Dataloading: 0.0022 s/iter. Inference: 0.0934 s/iter. Eval: 0.0162 s/iter. Total: 0.1119 s/iter. ETA=0:00:44
[08/08 19:53:45] detectron2.evaluation.evaluator INFO: Inference done 151/500. Dataloading: 0.0022 s/iter. Inference: 0.0923 s/iter. Eval: 0.0144 s/iter. Total: 0.1089 s/iter. ETA=0:00:38
[08/08 19:53:50] detectron2.evaluation.evaluator INFO: Inference done 199/500. Dataloading: 0.0022 s/iter. Inference: 0.0917 s/iter. Eval: 0.0139 s/iter. Total: 0.1078 s/iter. ETA=0:00:32
[08/08 19:53:55] detectron2.evaluation.evaluator INFO: Inference done 245/500. Dataloading: 0.0022 s/iter. Inference: 0.0921 s/iter. Eval: 0.0138 s/iter. Total: 0.1082 s/iter. ETA=0:00:27
[08/08 19:54:00] detectron2.evaluation.evaluator INFO: Inference done 294/500. Dataloading: 0.0021 s/iter. Inference: 0.0915 s/iter. Eval: 0.0136 s/iter. Total: 0.1073 s/iter. ETA=0:00:22
[08/08 19:54:05] detectron2.evaluation.evaluator INFO: Inference done 338/500. Dataloading: 0.0021 s/iter. Inference: 0.0919 s/iter. Eval: 0.0144 s/iter. Total: 0.1085 s/iter. ETA=0:00:17
[08/08 19:54:10] detectron2.evaluation.evaluator INFO: Inference done 385/500. Dataloading: 0.0021 s/iter. Inference: 0.0919 s/iter. Eval: 0.0144 s/iter. Total: 0.1084 s/iter. ETA=0:00:12
[08/08 19:54:15] detectron2.evaluation.evaluator INFO: Inference done 433/500. Dataloading: 0.0021 s/iter. Inference: 0.0918 s/iter. Eval: 0.0140 s/iter. Total: 0.1080 s/iter. ETA=0:00:07
[08/08 19:54:20] detectron2.evaluation.evaluator INFO: Inference done 480/500. Dataloading: 0.0021 s/iter. Inference: 0.0919 s/iter. Eval: 0.0139 s/iter. Total: 0.1080 s/iter. ETA=0:00:02
[08/08 19:54:23] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.798646 (0.108684 s / iter per device, on 4 devices)
[08/08 19:54:23] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.091767 s / iter per device, on 4 devices)
[08/08 21:02:01] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 21:02:01] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 21:02:01] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 21:02:01] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 21:02:01] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 21:02:10] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0017 s/iter. Inference: 0.1027 s/iter. Eval: 0.0207 s/iter. Total: 0.1251 s/iter. ETA=0:01:01
[08/08 21:02:16] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0023 s/iter. Inference: 0.0965 s/iter. Eval: 0.0161 s/iter. Total: 0.1150 s/iter. ETA=0:00:51
[08/08 21:02:21] detectron2.evaluation.evaluator INFO: Inference done 103/500. Dataloading: 0.0023 s/iter. Inference: 0.0933 s/iter. Eval: 0.0155 s/iter. Total: 0.1111 s/iter. ETA=0:00:44
[08/08 21:02:26] detectron2.evaluation.evaluator INFO: Inference done 152/500. Dataloading: 0.0022 s/iter. Inference: 0.0923 s/iter. Eval: 0.0140 s/iter. Total: 0.1086 s/iter. ETA=0:00:37
[08/08 21:02:31] detectron2.evaluation.evaluator INFO: Inference done 199/500. Dataloading: 0.0022 s/iter. Inference: 0.0924 s/iter. Eval: 0.0135 s/iter. Total: 0.1081 s/iter. ETA=0:00:32
[08/08 21:02:36] detectron2.evaluation.evaluator INFO: Inference done 245/500. Dataloading: 0.0022 s/iter. Inference: 0.0928 s/iter. Eval: 0.0135 s/iter. Total: 0.1085 s/iter. ETA=0:00:27
[08/08 21:02:41] detectron2.evaluation.evaluator INFO: Inference done 292/500. Dataloading: 0.0021 s/iter. Inference: 0.0927 s/iter. Eval: 0.0136 s/iter. Total: 0.1084 s/iter. ETA=0:00:22
[08/08 21:02:46] detectron2.evaluation.evaluator INFO: Inference done 336/500. Dataloading: 0.0021 s/iter. Inference: 0.0929 s/iter. Eval: 0.0144 s/iter. Total: 0.1095 s/iter. ETA=0:00:17
[08/08 21:02:51] detectron2.evaluation.evaluator INFO: Inference done 382/500. Dataloading: 0.0022 s/iter. Inference: 0.0929 s/iter. Eval: 0.0143 s/iter. Total: 0.1094 s/iter. ETA=0:00:12
[08/08 21:02:56] detectron2.evaluation.evaluator INFO: Inference done 431/500. Dataloading: 0.0021 s/iter. Inference: 0.0926 s/iter. Eval: 0.0139 s/iter. Total: 0.1087 s/iter. ETA=0:00:07
[08/08 21:03:01] detectron2.evaluation.evaluator INFO: Inference done 478/500. Dataloading: 0.0022 s/iter. Inference: 0.0924 s/iter. Eval: 0.0139 s/iter. Total: 0.1086 s/iter. ETA=0:00:02
[08/08 21:03:04] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:54.007123 (0.109105 s / iter per device, on 4 devices)
[08/08 21:03:04] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.092185 s / iter per device, on 4 devices)
[08/08 22:10:45] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 22:10:45] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 22:10:45] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 22:10:45] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 22:10:45] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 22:10:55] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0017 s/iter. Inference: 0.0962 s/iter. Eval: 0.0177 s/iter. Total: 0.1157 s/iter. ETA=0:00:56
[08/08 22:11:00] detectron2.evaluation.evaluator INFO: Inference done 57/500. Dataloading: 0.0021 s/iter. Inference: 0.0934 s/iter. Eval: 0.0147 s/iter. Total: 0.1102 s/iter. ETA=0:00:48
[08/08 22:11:05] detectron2.evaluation.evaluator INFO: Inference done 105/500. Dataloading: 0.0020 s/iter. Inference: 0.0907 s/iter. Eval: 0.0146 s/iter. Total: 0.1073 s/iter. ETA=0:00:42
[08/08 22:11:10] detectron2.evaluation.evaluator INFO: Inference done 155/500. Dataloading: 0.0021 s/iter. Inference: 0.0897 s/iter. Eval: 0.0135 s/iter. Total: 0.1054 s/iter. ETA=0:00:36
[08/08 22:11:15] detectron2.evaluation.evaluator INFO: Inference done 203/500. Dataloading: 0.0021 s/iter. Inference: 0.0901 s/iter. Eval: 0.0132 s/iter. Total: 0.1056 s/iter. ETA=0:00:31
[08/08 22:11:20] detectron2.evaluation.evaluator INFO: Inference done 250/500. Dataloading: 0.0021 s/iter. Inference: 0.0905 s/iter. Eval: 0.0132 s/iter. Total: 0.1058 s/iter. ETA=0:00:26
[08/08 22:11:25] detectron2.evaluation.evaluator INFO: Inference done 298/500. Dataloading: 0.0022 s/iter. Inference: 0.0904 s/iter. Eval: 0.0133 s/iter. Total: 0.1058 s/iter. ETA=0:00:21
[08/08 22:11:30] detectron2.evaluation.evaluator INFO: Inference done 341/500. Dataloading: 0.0021 s/iter. Inference: 0.0909 s/iter. Eval: 0.0141 s/iter. Total: 0.1072 s/iter. ETA=0:00:17
[08/08 22:11:35] detectron2.evaluation.evaluator INFO: Inference done 389/500. Dataloading: 0.0021 s/iter. Inference: 0.0909 s/iter. Eval: 0.0140 s/iter. Total: 0.1071 s/iter. ETA=0:00:11
[08/08 22:11:40] detectron2.evaluation.evaluator INFO: Inference done 438/500. Dataloading: 0.0021 s/iter. Inference: 0.0906 s/iter. Eval: 0.0137 s/iter. Total: 0.1065 s/iter. ETA=0:00:06
[08/08 22:11:45] detectron2.evaluation.evaluator INFO: Inference done 486/500. Dataloading: 0.0021 s/iter. Inference: 0.0907 s/iter. Eval: 0.0137 s/iter. Total: 0.1065 s/iter. ETA=0:00:01
[08/08 22:11:47] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.120607 (0.107314 s / iter per device, on 4 devices)
[08/08 22:11:47] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:44 (0.090669 s / iter per device, on 4 devices)
[08/08 23:19:34] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/08 23:19:34] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/08 23:19:34] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/08 23:19:34] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/08 23:19:34] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/08 23:19:43] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0018 s/iter. Inference: 0.0967 s/iter. Eval: 0.0188 s/iter. Total: 0.1173 s/iter. ETA=0:00:57
[08/08 23:19:48] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0021 s/iter. Inference: 0.0955 s/iter. Eval: 0.0158 s/iter. Total: 0.1135 s/iter. ETA=0:00:50
[08/08 23:19:53] detectron2.evaluation.evaluator INFO: Inference done 104/500. Dataloading: 0.0021 s/iter. Inference: 0.0922 s/iter. Eval: 0.0152 s/iter. Total: 0.1096 s/iter. ETA=0:00:43
[08/08 23:19:58] detectron2.evaluation.evaluator INFO: Inference done 152/500. Dataloading: 0.0020 s/iter. Inference: 0.0925 s/iter. Eval: 0.0139 s/iter. Total: 0.1085 s/iter. ETA=0:00:37
[08/08 23:20:03] detectron2.evaluation.evaluator INFO: Inference done 200/500. Dataloading: 0.0021 s/iter. Inference: 0.0922 s/iter. Eval: 0.0133 s/iter. Total: 0.1076 s/iter. ETA=0:00:32
[08/08 23:20:08] detectron2.evaluation.evaluator INFO: Inference done 246/500. Dataloading: 0.0021 s/iter. Inference: 0.0923 s/iter. Eval: 0.0134 s/iter. Total: 0.1079 s/iter. ETA=0:00:27
[08/08 23:20:13] detectron2.evaluation.evaluator INFO: Inference done 295/500. Dataloading: 0.0021 s/iter. Inference: 0.0916 s/iter. Eval: 0.0132 s/iter. Total: 0.1070 s/iter. ETA=0:00:21
[08/08 23:20:18] detectron2.evaluation.evaluator INFO: Inference done 339/500. Dataloading: 0.0021 s/iter. Inference: 0.0919 s/iter. Eval: 0.0140 s/iter. Total: 0.1081 s/iter. ETA=0:00:17
[08/08 23:20:23] detectron2.evaluation.evaluator INFO: Inference done 387/500. Dataloading: 0.0021 s/iter. Inference: 0.0916 s/iter. Eval: 0.0140 s/iter. Total: 0.1077 s/iter. ETA=0:00:12
[08/08 23:20:28] detectron2.evaluation.evaluator INFO: Inference done 437/500. Dataloading: 0.0021 s/iter. Inference: 0.0912 s/iter. Eval: 0.0137 s/iter. Total: 0.1071 s/iter. ETA=0:00:06
[08/08 23:20:33] detectron2.evaluation.evaluator INFO: Inference done 485/500. Dataloading: 0.0021 s/iter. Inference: 0.0911 s/iter. Eval: 0.0137 s/iter. Total: 0.1070 s/iter. ETA=0:00:01
[08/08 23:20:35] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.262971 (0.107602 s / iter per device, on 4 devices)
[08/08 23:20:35] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.091010 s / iter per device, on 4 devices)
[08/09 00:28:15] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/09 00:28:15] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/09 00:28:15] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/09 00:28:15] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/09 00:28:15] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/09 00:28:24] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0017 s/iter. Inference: 0.1036 s/iter. Eval: 0.0185 s/iter. Total: 0.1238 s/iter. ETA=0:01:00
[08/09 00:28:29] detectron2.evaluation.evaluator INFO: Inference done 55/500. Dataloading: 0.0022 s/iter. Inference: 0.0983 s/iter. Eval: 0.0162 s/iter. Total: 0.1167 s/iter. ETA=0:00:51
[08/09 00:28:34] detectron2.evaluation.evaluator INFO: Inference done 101/500. Dataloading: 0.0022 s/iter. Inference: 0.0946 s/iter. Eval: 0.0163 s/iter. Total: 0.1132 s/iter. ETA=0:00:45
[08/09 00:28:39] detectron2.evaluation.evaluator INFO: Inference done 147/500. Dataloading: 0.0023 s/iter. Inference: 0.0947 s/iter. Eval: 0.0148 s/iter. Total: 0.1119 s/iter. ETA=0:00:39
[08/09 00:28:44] detectron2.evaluation.evaluator INFO: Inference done 194/500. Dataloading: 0.0024 s/iter. Inference: 0.0941 s/iter. Eval: 0.0140 s/iter. Total: 0.1106 s/iter. ETA=0:00:33
[08/09 00:28:49] detectron2.evaluation.evaluator INFO: Inference done 239/500. Dataloading: 0.0024 s/iter. Inference: 0.0944 s/iter. Eval: 0.0142 s/iter. Total: 0.1111 s/iter. ETA=0:00:29
[08/09 00:28:54] detectron2.evaluation.evaluator INFO: Inference done 286/500. Dataloading: 0.0024 s/iter. Inference: 0.0940 s/iter. Eval: 0.0139 s/iter. Total: 0.1104 s/iter. ETA=0:00:23
[08/09 00:28:59] detectron2.evaluation.evaluator INFO: Inference done 328/500. Dataloading: 0.0024 s/iter. Inference: 0.0944 s/iter. Eval: 0.0148 s/iter. Total: 0.1118 s/iter. ETA=0:00:19
[08/09 00:29:04] detectron2.evaluation.evaluator INFO: Inference done 373/500. Dataloading: 0.0024 s/iter. Inference: 0.0943 s/iter. Eval: 0.0150 s/iter. Total: 0.1118 s/iter. ETA=0:00:14
[08/09 00:29:09] detectron2.evaluation.evaluator INFO: Inference done 420/500. Dataloading: 0.0024 s/iter. Inference: 0.0941 s/iter. Eval: 0.0146 s/iter. Total: 0.1112 s/iter. ETA=0:00:08
[08/09 00:29:14] detectron2.evaluation.evaluator INFO: Inference done 466/500. Dataloading: 0.0025 s/iter. Inference: 0.0939 s/iter. Eval: 0.0146 s/iter. Total: 0.1110 s/iter. ETA=0:00:03
[08/09 00:29:18] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:55.087317 (0.111288 s / iter per device, on 4 devices)
[08/09 00:29:18] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:46 (0.093561 s / iter per device, on 4 devices)
[08/09 01:36:44] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/09 01:36:44] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/09 01:36:44] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/09 01:36:44] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/09 01:36:44] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/09 01:36:53] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0020 s/iter. Inference: 0.1022 s/iter. Eval: 0.0181 s/iter. Total: 0.1222 s/iter. ETA=0:00:59
[08/09 01:36:58] detectron2.evaluation.evaluator INFO: Inference done 57/500. Dataloading: 0.0022 s/iter. Inference: 0.0936 s/iter. Eval: 0.0154 s/iter. Total: 0.1112 s/iter. ETA=0:00:49
[08/09 01:37:03] detectron2.evaluation.evaluator INFO: Inference done 103/500. Dataloading: 0.0021 s/iter. Inference: 0.0934 s/iter. Eval: 0.0154 s/iter. Total: 0.1110 s/iter. ETA=0:00:44
[08/09 01:37:08] detectron2.evaluation.evaluator INFO: Inference done 151/500. Dataloading: 0.0022 s/iter. Inference: 0.0927 s/iter. Eval: 0.0139 s/iter. Total: 0.1089 s/iter. ETA=0:00:38
[08/09 01:37:13] detectron2.evaluation.evaluator INFO: Inference done 199/500. Dataloading: 0.0022 s/iter. Inference: 0.0925 s/iter. Eval: 0.0134 s/iter. Total: 0.1082 s/iter. ETA=0:00:32
[08/09 01:37:18] detectron2.evaluation.evaluator INFO: Inference done 246/500. Dataloading: 0.0022 s/iter. Inference: 0.0924 s/iter. Eval: 0.0136 s/iter. Total: 0.1082 s/iter. ETA=0:00:27
[08/09 01:37:23] detectron2.evaluation.evaluator INFO: Inference done 293/500. Dataloading: 0.0022 s/iter. Inference: 0.0921 s/iter. Eval: 0.0136 s/iter. Total: 0.1080 s/iter. ETA=0:00:22
[08/09 01:37:28] detectron2.evaluation.evaluator INFO: Inference done 337/500. Dataloading: 0.0022 s/iter. Inference: 0.0923 s/iter. Eval: 0.0143 s/iter. Total: 0.1089 s/iter. ETA=0:00:17
[08/09 01:37:33] detectron2.evaluation.evaluator INFO: Inference done 385/500. Dataloading: 0.0022 s/iter. Inference: 0.0920 s/iter. Eval: 0.0143 s/iter. Total: 0.1085 s/iter. ETA=0:00:12
[08/09 01:37:38] detectron2.evaluation.evaluator INFO: Inference done 434/500. Dataloading: 0.0022 s/iter. Inference: 0.0918 s/iter. Eval: 0.0140 s/iter. Total: 0.1081 s/iter. ETA=0:00:07
[08/09 01:37:43] detectron2.evaluation.evaluator INFO: Inference done 480/500. Dataloading: 0.0022 s/iter. Inference: 0.0918 s/iter. Eval: 0.0141 s/iter. Total: 0.1082 s/iter. ETA=0:00:02
[08/09 01:37:46] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:53.653619 (0.108391 s / iter per device, on 4 devices)
[08/09 01:37:46] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.091462 s / iter per device, on 4 devices)
[08/09 02:45:18] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=2560, sample_style='choice')]
[08/09 02:45:18] detectron2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/09 02:45:18] detectron2.data.common INFO: Serializing 2000 elements to byte tensors and concatenating them all ...
[08/09 02:45:18] detectron2.data.common INFO: Serialized dataset takes 1.95 MiB
[08/09 02:45:18] detectron2.evaluation.evaluator INFO: Start inference on 500 batches
[08/09 02:45:27] detectron2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0017 s/iter. Inference: 0.0986 s/iter. Eval: 0.0193 s/iter. Total: 0.1196 s/iter. ETA=0:00:58
[08/09 02:45:32] detectron2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0024 s/iter. Inference: 0.0951 s/iter. Eval: 0.0156 s/iter. Total: 0.1132 s/iter. ETA=0:00:50
[08/09 02:45:37] detectron2.evaluation.evaluator INFO: Inference done 103/500. Dataloading: 0.0024 s/iter. Inference: 0.0927 s/iter. Eval: 0.0153 s/iter. Total: 0.1104 s/iter. ETA=0:00:43
[08/09 02:45:42] detectron2.evaluation.evaluator INFO: Inference done 151/500. Dataloading: 0.0025 s/iter. Inference: 0.0925 s/iter. Eval: 0.0138 s/iter. Total: 0.1088 s/iter. ETA=0:00:37
[08/09 02:45:47] detectron2.evaluation.evaluator INFO: Inference done 200/500. Dataloading: 0.0024 s/iter. Inference: 0.0914 s/iter. Eval: 0.0132 s/iter. Total: 0.1072 s/iter. ETA=0:00:32
[08/09 02:45:52] detectron2.evaluation.evaluator INFO: Inference done 248/500. Dataloading: 0.0023 s/iter. Inference: 0.0910 s/iter. Eval: 0.0133 s/iter. Total: 0.1067 s/iter. ETA=0:00:26
[08/09 02:45:57] detectron2.evaluation.evaluator INFO: Inference done 296/500. Dataloading: 0.0023 s/iter. Inference: 0.0908 s/iter. Eval: 0.0133 s/iter. Total: 0.1064 s/iter. ETA=0:00:21
[08/09 02:46:02] detectron2.evaluation.evaluator INFO: Inference done 340/500. Dataloading: 0.0023 s/iter. Inference: 0.0909 s/iter. Eval: 0.0143 s/iter. Total: 0.1075 s/iter. ETA=0:00:17
[08/09 02:46:07] detectron2.evaluation.evaluator INFO: Inference done 389/500. Dataloading: 0.0023 s/iter. Inference: 0.0903 s/iter. Eval: 0.0142 s/iter. Total: 0.1068 s/iter. ETA=0:00:11
[08/09 02:46:12] detectron2.evaluation.evaluator INFO: Inference done 438/500. Dataloading: 0.0023 s/iter. Inference: 0.0902 s/iter. Eval: 0.0139 s/iter. Total: 0.1064 s/iter. ETA=0:00:06
[08/09 02:46:17] detectron2.evaluation.evaluator INFO: Inference done 487/500. Dataloading: 0.0023 s/iter. Inference: 0.0898 s/iter. Eval: 0.0138 s/iter. Total: 0.1060 s/iter. ETA=0:00:01
[08/09 02:46:19] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:52.767275 (0.106601 s / iter per device, on 4 devices)
[08/09 02:46:19] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:44 (0.089674 s / iter per device, on 4 devices)
[08/09 03:17:31] detectron2.engine.hooks INFO: Overall training speed: 137283 iterations in 1 day, 7:32:07 (0.8270 s / it)
[08/09 03:17:31] detectron2.engine.hooks INFO: Total training time: 1 day, 8:20:13 (0:48:05 on hooks)
